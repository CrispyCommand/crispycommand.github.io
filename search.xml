<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[洛谷 P5656] 【模板】二元一次不定方程</title>
      <link href="/2020/09/07/%E6%B4%9B%E8%B0%B7-P5656-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E5%85%83%E4%B8%80%E6%AC%A1%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/"/>
      <url>/2020/09/07/%E6%B4%9B%E8%B0%B7-P5656-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E4%BA%8C%E5%85%83%E4%B8%80%E6%AC%A1%E4%B8%8D%E5%AE%9A%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P5656" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出不定方程 $ax + by = c$，判断是否有整数解，若无解输出 $-1$，若有整数解但无正整数解，输出 $x_{\min}, y_{\min}(x, y &gt; 0)$，若有正整数解输出正整数解的数量，$x_{\min}, y_{\min}, x_{\max}, y_{\max}(x, y &gt; 0)$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>好久没写这么数学的数学题了……</p><p>首先判断无解，由裴蜀定理得当 $c | \gcd(a, b)$ 时有解。</p><p>用扩展欧几里得算法算出 $ax + by = \gcd(a, b)$ 的一组解 $x_0, y_0$，即 $ax_0 + by_0 = \gcd(a, b)$。</p><p>至于怎么算，先求出 $ax + by = 1$ 的解然后乘 $\gcd(a, b)$ 就行了。</p><p>此时原方程可以写成 $\dfrac{acx_0}{\gcd(a, b)} + \dfrac{bcy_0}{\gcd(a, b)} = c$（同时乘上 $\dfrac{c}{\gcd(a, b)}$）。</p><p>即一组解为 $x_1 = \dfrac{cx_0}{\gcd(a, b)}, y_1 = \dfrac{cy_0}{\gcd(a, b)}$，也就是 $ax_1 + by_1 = c$。</p><p>这还不够，题目让求出一大堆奇奇怪怪的东西，意味着我们要构造出通解。</p><p>这个式子应该长这个样子：$a(x_1 + bd) + b(y_1 - ad) = c$（展开后消掉了）。</p><p>感性理解一下，这个 $bd$ 和 $ad$ 应该是在某一个基准上成倍的改变的，我们考虑求出这个基准。</p><p>设 $d_x = bd_{\min}, d_y = ad_{\min}$（<del>有微分方程那味了</del>）。</p><p>那么 $ad_x = bd_y$。</p><p>这个式子什么时候相等且 $d_x, d_y$ 都最小呢？显然当左右两边都为 $\mathrm{lcm}(a, b)$ 时。</p><p>我们又知道 $\mathrm{lcm}(a, b) = \dfrac{ab}{\gcd(a, b)}$，得到 $d_x = \dfrac{b}{\gcd(a, b)}, d_y = \dfrac{a}{\gcd(a, b)}$。</p><p>通解就可以表示出来了，$x = x_1 + sd_x, y = y_1 - sd_y(s \in \mathbb{Z})$。</p><p>题目让我们找出最小正整数解，意味着解不等式组 $\begin{cases}x_1 + sd_x &gt; 0 \\y_1 - sd_y &gt; 0 \\\end{cases}$。</p><p>解得 $-\dfrac{d_x}{x_1} &lt; s &lt; \dfrac{y_1}{d_y}$。</p><p>由于 $s \in \mathbb{Z}$，将两边取个整，得到 $-\lceil \dfrac{x_1}{d_x} \rceil \le s \le \lfloor \dfrac{y_1}{d_y} \rfloor$。</p><p>这样我们就先求出 $x_{\min}$ 和 $y_{\min}$ 了。</p><p>代入原方程，显然 $x$ 越小时 $y$ 越大，我们可以根据这个算出 $x_{\max} = \dfrac{c - by_{\min}}{a}, y_{\max} = \dfrac{c - ax_{\min}}{b}$。</p><p>最后就是解的个数了，用 $\dfrac{x_{\max} - x_{\min}}{d_x} + 1$ 或者 $\dfrac{y_{\max} - y_{\min}}{d_y} + 1$ 算就好了。</p><p>注意开 <code>long long</code>，这道题还有很多这取整那取整的细节。</p><p>感觉自己数论还是差的一批，要完。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL T, a, b, c, x, y, xmin, ymin, xmax, ymax, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exGcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    LL d = exGcd(b, a % b, x, y), t = x;</span><br><span class="line">    x = y, y = t - (a / b) * y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        x = y = cnt = <span class="number">0</span>;</span><br><span class="line">        read(a), read(b), read(c);</span><br><span class="line">        LL g = gcd(a, b);</span><br><span class="line">        <span class="keyword">if</span> (c % g) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a /= g, b /= g, c /= g;</span><br><span class="line">        exGcd(a, b, x, y);</span><br><span class="line">        x *= c, y *= c;</span><br><span class="line">        xmin = (x &gt; <span class="number">0</span> &amp;&amp; x % b) ? x % b : x % b + b;</span><br><span class="line">        ymax = (c - xmin * a) / b;</span><br><span class="line">        ymin = (y &gt; <span class="number">0</span> &amp;&amp; y % a) ? y % a : y % a + a;</span><br><span class="line">        xmax = (c - ymin * b) / a;</span><br><span class="line">        <span class="keyword">if</span> (xmax &gt; <span class="number">0</span>)   cnt = (xmax - xmin) / b + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>)    <span class="built_in">printf</span>(<span class="string">"%lld %lld %lld %lld %lld\n"</span>, cnt, xmin, ymin, xmax, ymax);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, xmin, ymin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数学 </category>
          
          <category> 数论 </category>
          
          <category> 最大公约数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[洛谷 P2801] 教主的魔法</title>
      <link href="/2020/09/06/%E6%B4%9B%E8%B0%B7-P2801-%E6%95%99%E4%B8%BB%E7%9A%84%E9%AD%94%E6%B3%95/"/>
      <url>/2020/09/06/%E6%B4%9B%E8%B0%B7-P2801-%E6%95%99%E4%B8%BB%E7%9A%84%E9%AD%94%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P2801" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：写一种数据结构，支持区间修改，查询区间内大于给定数的个数。$1 \le n \le 10^6, 1 \le Q \le 3000$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以拿线段树维护一下区间最小值，如果当前这个区间的最小值都比查询的数大，那这个区间所有数都比它大，直接返回区间长度就行了。</p><p>然后我就把区间长度写成了 $l - r + 1$，要完。</p><p>还被字符读入坑了一晚上，奉劝各位以后拿 <code>scanf(&quot;%s&quot;, c)</code> 读字符。</p><p>据说这题线段树复杂度是假的，会被特殊数据卡到 TLE。</p><p>可以拿分块过去，但是不想写分块。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    LL v, tag;</span><br><span class="line">&#125; t[<span class="number">4000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, L, R, W;</span><br><span class="line"><span class="keyword">char</span> opt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x].tag) &#123;</span><br><span class="line">        t[lson(x)].tag += t[x].tag, t[rson(x)].tag += t[x].tag;</span><br><span class="line">        t[lson(x)].v += t[x].tag, t[rson(x)].v += t[x].tag;</span><br><span class="line">        t[x].tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[x].l = l, t[x].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        read(t[x].v);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    buildTree(lson(x), l, mid), buildTree(rson(x), mid + <span class="number">1</span>, r);</span><br><span class="line">    t[x].v = <span class="built_in">std</span>::min(t[lson(x)].v, t[rson(x)].v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x].l &gt;= l &amp;&amp; t[x].r &lt;= r) &#123;</span><br><span class="line">        t[x].v += d;</span><br><span class="line">        t[x].tag += d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(x);</span><br><span class="line">    <span class="keyword">int</span> mid = (t[x].l + t[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)   modify(lson(x), l, r, d);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)    modify(rson(x), l, r, d);</span><br><span class="line">    t[x].v = <span class="built_in">std</span>::min(t[lson(x)].v, t[rson(x)].v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x].l &gt;= l &amp;&amp; t[x].r &lt;= r &amp;&amp; t[x].v &gt;= d)  <span class="keyword">return</span> t[x].r - t[x].l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (t[x].l == t[x].r)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[x].l + t[x].r) &gt;&gt; <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">    pushDown(x);</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)   s += query(lson(x), l, r, d);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)    s += query(rson(x), l, r, d);</span><br><span class="line">    <span class="keyword">return</span> s;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(q);</span><br><span class="line">    buildTree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;opt);</span><br><span class="line">        read(L), read(R), read(W);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="string">'M'</span>) &#123;</span><br><span class="line">            modify(<span class="number">1</span>, L, R, W);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(<span class="number">1</span>, L, R, W));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="魔法"><a href="#魔法" class="headerlink" title="魔法"></a>魔法</h3><p>偶然看到了<a href="https://ouuan.github.io/post/n%E6%96%B9%E8%BF%87%E7%99%BE%E4%B8%87-%E6%9A%B4%E5%8A%9B%E7%A2%BE%E6%A0%87%E7%AE%97%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BC%98%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/#%E4%BE%8B%E9%A2%98" target="_blank" rel="noopener">这篇博客</a>。</p><p>草，真的是教 主 的 魔 法。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __AVX__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __AVX2__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSE__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSE2__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSE2_MATH__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSE3__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSE4_1__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSE4_2__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSE_MATH__ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SSSE3__ 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,no-stack-protector,unroll-loops,fast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;immintrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Magic</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">__m256i A[maxn &gt;&gt; <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> *a, aa[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line">__m256i x;</span><br><span class="line"><span class="keyword">int</span> n, m, tot, L, R, W;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((l &amp; <span class="number">7</span>) &amp;&amp; l &lt; r)    a[l++] += x;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">while</span> (r &amp; <span class="number">7</span>)   a[--r] += x;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> ;</span><br><span class="line">    __m256i t = _mm256_set1_epi32(x);</span><br><span class="line">    <span class="keyword">for</span> (l &gt;&gt;=<span class="number">3</span>, r &gt;&gt;=<span class="number">3</span>; l &lt; r; ++l)    A[l] = _mm256_add_epi32(A[l], t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((l &amp; <span class="number">7</span>) &amp;&amp; l &lt; r)    out += <span class="keyword">int</span>(a[l++] &gt;= x);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> out;</span><br><span class="line">    <span class="keyword">while</span> (r &amp; <span class="number">7</span>)   out += <span class="keyword">int</span>(a[--r] &gt;= x);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> out;</span><br><span class="line">    __m256i t = _mm256_set1_epi32(<span class="number">1</span>), ans = _mm256_set1_epi32(<span class="number">0</span>), cp = _mm256_set1_epi32(x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (l &gt;&gt;= <span class="number">3</span>, r &gt;&gt;= <span class="number">3</span>; l &lt; r; ++l)  ans = _mm256_add_epi32(ans, _mm256_and_si256(t, _mm256_cmpgt_epi32(A[l], cp)));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) out += (ans[i] &amp; <span class="number">0xffffffff</span>) + (ans[i] &gt;&gt; <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, aa + i);</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, aa + i);</span><br><span class="line">            n -= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        A[tot++] = _mm256_set_epi32(aa[<span class="number">7</span>], aa[<span class="number">6</span>], aa[<span class="number">5</span>], aa[<span class="number">4</span>], aa[<span class="number">3</span>], aa[<span class="number">2</span>], aa[<span class="number">1</span>], aa[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    a = (<span class="keyword">int</span> *)&amp;A;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d%d%d"</span>, op, &amp;L, &amp;R, &amp;W);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">'M'</span>)   modify(L - <span class="number">1</span>, R, W);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(L - <span class="number">1</span>, R, W));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TJOI2018] 数学计算</title>
      <link href="/2020/09/01/TJOI2018-%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
      <url>/2020/09/01/TJOI2018-%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/2573" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：$t$ 组数据。有一个数 $x$，每次可以乘上 $m$ 或者除以之前某次操作乘上的数，输出每次操作后的 $x \bmod M$。$1 \le t \le 5, 1 \le Q \le 10^5, 1 \le M \le 10^9$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>第一眼是数组模拟，交了一发全 WA 了。</p><p>取模运算是不能乱加除法的，当然如果是数学神仙的话应该可以写个奇怪的东西过去。</p><p>考虑这两个操作，乘上 $m$ 可以看成插入一个数 $m$，除以 $m$ 可以看成把原来 $m$ 的这个位置变成 $1$。</p><p>然后就是一个单点修改，询问区间积的模板。</p><p>线段树一个 zz 错误调了半天，要凉。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    LL v;</span><br><span class="line">&#125; t[<span class="number">400010</span>];</span><br><span class="line"></span><br><span class="line">LL m[<span class="number">100010</span>];</span><br><span class="line">LL T, Q, mod, op, x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[x].l = l, t[x].r = r, t[x].v = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    buildTree(lson(x), l, mid), buildTree(rson(x), mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x].l == l &amp;&amp; t[x].r == r) &#123;</span><br><span class="line">        t[x].v = v;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL mid = (t[x].l + t[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)   modify(lson(x), l, r, v);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)    modify(rson(x), l, r, v);</span><br><span class="line">    t[x].v = ((t[lson(x)].v % mod) * (t[rson(x)].v % mod)) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        read(Q), read(mod);</span><br><span class="line">        buildTree(<span class="number">1</span>, <span class="number">1</span>, Q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">            read(op), read(m[i]);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                modify(<span class="number">1</span>, i, i, m[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                modify(<span class="number">1</span>, m[i], m[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, t[<span class="number">1</span>].v % mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TJOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[EZEC-3] 排列</title>
      <link href="/2020/08/26/EZEC-3-%E6%8E%92%E5%88%97/"/>
      <url>/2020/08/26/EZEC-3-%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P6785" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：现有一堆数，从中选取若干个数排成一列，记为 $x_1, x_2, \cdots, x_p$ 且满足 $p \ge 2, y_i = x_{i + 1} - x_i(y_p = x_1 - x_p), y_i = -y_{i + 1}, |y_i| = k$。求 $\sum x_p$ 的最大值。无解输出 <code>NO</code>。$1 \le n \le 10^6, 0 \le k \le 10^6$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>颓废了好几天没写题……<del>于是写了道水题</del>。</p><p>题目看着花里胡哨的，但其实就是让满足最后的序列为 $a, b, a, b, a, b$ 这个样子。</p><p>把每个数存到桶里，枚举一遍，就做完了。</p><p>看到有人说细节很多，感觉也不算多吧……</p><p>$k = 0$ 的时候需要全部数一样，特判一下，枚举的时候判断一下 $i$ 和 $i + k$ 都有就行了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL t[<span class="number">1000010</span>];</span><br><span class="line">LL n, k, a, b, ans = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a), read(b), t[a] += b;</span><br><span class="line">    <span class="keyword">if</span> (!k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i] &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">std</span>::max(ans, t[i] * i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>)  <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + k &lt;= <span class="number">1000000</span> &amp;&amp; t[i] &amp;&amp; t[i + k]) &#123;</span><br><span class="line">            ans = <span class="built_in">std</span>::max(ans, <span class="built_in">std</span>::min(t[i + k], t[i]) * (i + i + k));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">-1</span>)  <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EZEC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[洛谷 P1768] 天路</title>
      <link href="/2020/08/20/%E6%B4%9B%E8%B0%B7-P1768-%E5%A4%A9%E8%B7%AF/"/>
      <url>/2020/08/20/%E6%B4%9B%E8%B0%B7-P1768-%E5%A4%A9%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1768" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个有向图 $G = (V, E)$，每条边有两个值 $v_i, p_i$，求一个环，使得这条路上的 $\dfrac{\sum v_i}{\sum p_i}$ 最大。$1 \le |V| \le 7000, 1 \le |E| \le 20000, 1 \le v_i, p_i \le 1000$，保证答案在 $200$ 以内。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>写完这道题才知道这个东西叫分数规划…</p><p>我们假设最后的答案为 $x$，则 $\dfrac{\sum v_i}{\sum p_i} \le x$。</p><p>移项可得 $x \sum p_i - \sum v_i \ge 0$。</p><p>显然这个 $x$ 是可以二分的，再加上题目中 $x$ 的范围十分小，我们要找的还是最小的 $x$，基本石锤了。</p><p>考虑 $x$ 不够大时会发生什么，显然这个图里会产生负环，那么每次二分的时候判负环就行了。</p><p>具体做法是将每条边的边权设为 $x’\dfrac{\sum v_i}{\sum p_i}$ 然后跑 SPFA。</p><p>这道题的数据十分迷…据说 DFS 可以过 BFS 过不了，然而这数据又很水，判入队超过 20 次就能过。</p><p>注意实数二分的数据类型。</p><p>其实做完以后发现这个东西挺裸的，像个模板…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-2</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, v, p;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Edge&gt; g[<span class="number">7010</span>];</span><br><span class="line"><span class="keyword">double</span> dis[<span class="number">7010</span>];</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">-1</span>, l = <span class="number">0</span>, r = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> times[<span class="number">7010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">7010</span>];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">double</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(times, <span class="number">0</span>, <span class="keyword">sizeof</span>(times));</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">0</span>);</span><br><span class="line">    vis[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[now] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[now])&#123;</span><br><span class="line">            <span class="keyword">double</span> w = mid * i.p - i.v;</span><br><span class="line">            <span class="keyword">if</span> (dis[i.to] &gt; dis[now] + w) &#123;</span><br><span class="line">                dis[i.to] = dis[now] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[i.to]) &#123;</span><br><span class="line">                    vis[i.to] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (++times[i.to] &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">return</span> ;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.push(i.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, b, v, p; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(a), read(b), read(v), read(p);</span><br><span class="line">        g[a].push_back((Edge)&#123;b, v, p&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    g[<span class="number">0</span>].push_back((Edge&#123;i, <span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= eps) &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        spfa(mid);</span><br><span class="line">        <span class="keyword">if</span> (flag)  l = mid, ans = mid;</span><br><span class="line">        <span class="keyword">else</span>    r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">-1</span>)  <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 杂项 </category>
          
          <category> 分数规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[国家集训队] Tree I</title>
      <link href="/2020/08/20/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-Tree-I/"/>
      <url>/2020/08/20/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-Tree-I/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P2619" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个无向带权连通图 $G = (V, E)$，每条边是黑色或白色，求一颗恰好有 $k$ 条白色边的 MST。$|V| \le 50000, |E| \le 10^5, 1 \le w \le 100$。题目保证有解。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>有一个很显然的做法，对边排序后先选 $k$ 条白色边，剩下的选黑色边。</p><p>但是这个做法是错误的，考虑以下这个图（$k = 1$）：</p><p><img src="https://i.loli.net/2020/08/20/i2s9voQedwMHj35.png" alt="image.png"></p><p>我们发现选白色的边会对选黑色的边的决策有影响，所以这个做法是错误的。</p><p>考虑一个做法：既然我们要求恰好有 $k$ 条白色的边，那就修改白色的边的权值，每次求出修改边权后的 MST，然后判断是不是恰好有 $k$ 条白色的边，如果不是的话就继续修改。</p><p>由于值域十分的小，显然白色的边的边权最多加或减 $100$ 就能找到答案，考虑二分。</p><p>二分的过程很显然了，每次对白边加或减上一个值，然后跑 MST，注意如果两条边的权值相等时要优先选白色的，统计用了多少条白边，最后判断是否满足题意，如果当前白边的条数 $k’ \ge k$ 就更新答案。</p><p>二分的时候记得初始化，每次更新完边界要把边权再减回去。</p><p>这道题的点的序号是从 $0$ 开始的，有些小坑。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> col;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.w == b.w) <span class="keyword">return</span> a.col &lt; b.col;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> find[<span class="number">50010</span>];</span><br><span class="line"><span class="keyword">int</span> v, e, need, ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionFind</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> find[x] == x ? x : find[x] = unionFind(find[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(v), read(e), read(need);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e; ++i)    read(a[i].u), read(a[i].v), read(a[i].w), read(a[i].col);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">-100</span>, r = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!a[i].col)</span><br><span class="line">                a[i].w += mid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= v; ++i)    find[i] = i;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, s = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + e + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e &amp;&amp; cnt &lt; v; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = unionFind(a[i].u), y = unionFind(a[i].v);</span><br><span class="line">            <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                find[x] = y;</span><br><span class="line">                <span class="keyword">if</span> (!a[i].col)  ++s;</span><br><span class="line">                sum += a[i].w;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= need) &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            ans = sum - need * mid;</span><br><span class="line">        &#125; <span class="keyword">else</span>  r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= e; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!a[i].col)</span><br><span class="line">                a[i].w -= mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 最小生成树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国家集训队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[洛谷 P2370] yyy2015c01 的 U 盘</title>
      <link href="/2020/08/19/%E6%B4%9B%E8%B0%B7-P2370-yyy2015c01-%E7%9A%84-U-%E7%9B%98/"/>
      <url>/2020/08/19/%E6%B4%9B%E8%B0%B7-P2370-yyy2015c01-%E7%9A%84-U-%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P2370" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：求当选中物品的总价值不小于 $p$ 时，选中物品中最大的体积。无解输出 <code>No Solution!</code>。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>水博客啦~</p><p>先把所有物品按体积排序，然后做 01 背包的时候判断即可。</p><p>时间复杂度 $O(n \log n + nS)$。</p><p>看了眼题解，原来还能二分啊。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    LL w, v;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line">LL f[<span class="number">1010</span>];</span><br><span class="line">LL n, p, s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(p), read(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i].w), read(a[i].v);</span><br><span class="line">    <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = s; j &gt;= a[i].w; --j) &#123;</span><br><span class="line">            f[j] = <span class="built_in">std</span>::max(f[j], f[j - a[i].w] + a[i].v);</span><br><span class="line">            <span class="keyword">if</span> (f[s] &gt;= p) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[i].w);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 背包 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[USACO2.2] Party Lamps</title>
      <link href="/2020/08/19/USACO2-2-Party-Lamps/"/>
      <url>/2020/08/19/USACO2-2-Party-Lamps/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1468" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：有 $n$ 盏最初是亮着的灯。有四种操作：改变所有的灯；改变所有奇数号的灯；改变所有偶数号的灯；改变所有序号是 $3k + 1 (k \in \mathbb{N})$ 的灯。已知一些灯在经过 $c$ 次操作后的状态，找出最后所有等灯可能的情况，无解输出 <code>IMPOSSIBLE</code>。$10 \le n \le 100, 0 \le c \le 10^4$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>简单手算几下，发现灯的状态其实是 $6$ 个一循环的，并且所有可能的状态只有 $8$ 种。</p><p>但是当 $c \le 2$ 时，有些状态是无法通过 $1$ 或 $2$ 次操作得到的，需要特判一下。</p><p>然后判断一下哪些状态不合法就完了。</p><p>注意 $c = 0$ 时的情况。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> stat[<span class="number">9</span>][<span class="number">7</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> on[<span class="number">110</span>], off[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> n, c, p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="literal">true</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    read(n), read(c);</span><br><span class="line">    <span class="keyword">while</span> (on[p] != <span class="number">-1</span>)  read(on[++p]);</span><br><span class="line">    <span class="keyword">while</span> (off[q] != <span class="number">-1</span>)  read(off[++q]);</span><br><span class="line">    --p, --q;</span><br><span class="line">    <span class="keyword">if</span> (!c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q)  <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    <span class="built_in">printf</span>(<span class="string">"1"</span>, i == n ? <span class="string">"\n"</span> : <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> st = on[i] % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">if</span> (st == <span class="number">0</span>)    st = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">8</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stat[j][st]) &#123;</span><br><span class="line">                b[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> st = off[i] % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">if</span> (st == <span class="number">0</span>)    st = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">8</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stat[j][st]) &#123;</span><br><span class="line">                b[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) b[<span class="number">2</span>] = b[<span class="number">5</span>] = b[<span class="number">7</span>] = b[<span class="number">8</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">2</span>) b[<span class="number">4</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i]) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, stat[i][j % <span class="number">6</span> == <span class="number">0</span> ? <span class="number">6</span> : j % <span class="number">6</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIp2003] 传染病控制</title>
      <link href="/2020/08/18/NOIp2003-%E4%BC%A0%E6%9F%93%E7%97%85%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/08/18/NOIp2003-%E4%BC%A0%E6%9F%93%E7%97%85%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1041" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：有一种病毒的传播途径是树型的，一个人只能被特定的人传染。每一轮传播周期后可以切断一条传播途径，求出可能的最少的被感染人数。树的大小 $1 \le n \le 300$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>注：此题是错题，没有靠谱的多项式复杂度的算法。</p><blockquote><p>没看到出处时以为是未卜先知，没想到是亡羊补牢。</p></blockquote><p>有一个很显然的贪心，每次只能切断当前这个周期其中的一个路径。</p><p>考虑维护每一层的结点，每次选择一个子结点将它和它的子树打上标记，搜索的时候跳过它。</p><p>这个过程可以用 <code>vector</code> 实现。</p><p>然后就是搜搜搜。既然是错题也没什么深究的必要了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[<span class="number">310</span>], node[<span class="number">310</span>];</span><br><span class="line"><span class="keyword">int</span> dep[<span class="number">310</span>], siz[<span class="number">310</span>], count[<span class="number">310</span>];</span><br><span class="line"><span class="keyword">int</span> n, p, maxDep, ans;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">310</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != p) &#123;</span><br><span class="line">            dep[i] = dep[x] + <span class="number">1</span>;</span><br><span class="line">            maxDep = <span class="built_in">std</span>::max(maxDep, dep[i]);</span><br><span class="line">            pre(i, x);</span><br><span class="line">            siz[x] += siz[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[i] &gt; dep[x]) &#123;</span><br><span class="line">            mark(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remark</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[i] &gt; dep[x]) &#123;</span><br><span class="line">            remark(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    ans = <span class="built_in">std</span>::max(ans, s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : node[now]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : g[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dep[j] &gt; dep[i]) &#123;</span><br><span class="line">                mark(j);</span><br><span class="line">                dfs(now + <span class="number">1</span>, s + siz[j]);</span><br><span class="line">                remark(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= p; ++i) &#123;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        g[u].push_back(v), g[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    pre(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    node[dep[i]].push_back(i);</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 搜索 </category>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOI1999] 生日蛋糕</title>
      <link href="/2020/08/17/NOI1999-%E7%94%9F%E6%97%A5%E8%9B%8B%E7%B3%95/"/>
      <url>/2020/08/17/NOI1999-%E7%94%9F%E6%97%A5%E8%9B%8B%E7%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1731" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：制作一个体积为 $N \pi$ 的 $M$ 层生日蛋糕，每层都是一个圆柱体。设从下往上数第 $i(1 \le i \le M)$ 层蛋糕是半径为 $R_i$，高度为 $H_i$ 的圆柱。当 $i &lt; M$ 时，要求 $R_i &gt; R_{i + 1}$ 且 $H_i &gt; H_{i + 1}$，找出一种制作方案使得外表面面积 $Q$ 最小，输出 $\dfrac{Q}{\pi}$。$N \le 2 \times 10^4, M \le 15$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>朴素的暴力在 $2 \times 10^4$ 面前会被吊起来打。</p><p>由于 $H_i &gt; 1$，又因为 $H_i &gt; H_{i + 1}$，所以第 $i$ 层的高度至少为 $i$。半径同理。</p><p>我们还可以这样推算出每一层的最小体积和最小表面积。</p><p>接下来就有很显然的剪枝方法：如果当前的表面积加上还没搜的最小表面积依然大于当前的最优解就直接退出。体积同理。</p><p>这样我们已经可以拿到很多分数了，但是离 AC 还差一点。</p><p>考虑几个公式：$V = \pi r^2 \times H, S = 2 \pi r \times H$。</p><p>将体积公式同时除以 $r$，不难得出这个式子：$\dfrac{2V}{r} = S$。</p><p>所以我们可以得出第三个剪枝方法：如果当前的表面积加上还没搜的体积除以半径大于当前的最优解就直接退出。</p><p>然后就可以 AC 了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">30</span>], b[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> lstr, <span class="keyword">int</span> lsth, <span class="keyword">int</span> v, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!now) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == n) &#123;</span><br><span class="line">            ans = <span class="built_in">std</span>::min(ans, s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s + (n - v) / lstr * <span class="number">2</span> &gt; ans)   <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (s + b[now] &gt; ans)   <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (v + a[now] &gt; n) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lstr - <span class="number">1</span>; i &gt;= now; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (now == m)   s = i * i;   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = lsth - <span class="number">1</span>; j &gt;= now; --j) &#123;</span><br><span class="line">            dfs(now - <span class="number">1</span>, i, j, v + i * i * j, s + <span class="number">2</span> * i * j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + i * i * i;</span><br><span class="line">        b[i] = b[i - <span class="number">1</span>] + <span class="number">2</span> * i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(m, <span class="built_in">sqrt</span>(n), n, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans == <span class="number">0x3f3f3f3f</span> ? <span class="number">-1</span> : ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>没想到结局是这个样子。</p><p>一切都在朝着错误的方向前进，我却依旧什么都做不到。</p><p>自己也终于走上了这条道路吗。</p><p>两年的时间，我不想再辜负别人的期望了。</p><p><meting-js    id="591797"    server="netease"    type="song"><br></meting-js></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 搜索 </category>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF1399E1] Weights Division (easy version)</title>
      <link href="/2020/08/07/CF1399E1-Weights-Division-easy-version/"/>
      <url>/2020/08/07/CF1399E1-Weights-Division-easy-version/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="http://codeforces.com/problemset/problem/1399/E1" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个有 $n$ 个节点的有根树，每次操作可以选定一条边，使它的边权变为原来的一半，求最少的操作次数使得 $\sum \limits_{v \in leaves} w(root, v) \le S$，其中 $w(i, j)$ 表示 $i, j$ 两点间的距离。$2 \le n \le 10^5, 1 \le S \le 10^{16}$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可能第一时间想到的贪心思路是从上往下删，但是这样的反例十分显然：下面边权比上面边权大很多就凉了。</p><p>然后我们可能会想到一个蛮正确的贪心思路：优先选边权乘以出现次数大的边。</p><p>考虑用堆来维护，排序的依据应该是边权对总和的影响乘以边出现的次数。</p><p>剩下就是一些常规套路了，什么求经过这条边的叶子个数什么的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    LL w, cnt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> (a.w - a.w / <span class="number">2</span>) * a.cnt &lt; (b.w - b.w / <span class="number">2</span>) * b.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;Edge&gt; q;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Edge&gt; g[<span class="number">200010</span>];</span><br><span class="line">LL s, sum, ans;</span><br><span class="line"><span class="keyword">int</span> siz[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">int</span> t, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::fill(siz + <span class="number">1</span>, siz + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())  q.pop();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    g[i].clear();</span><br><span class="line">    ans = sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> lst)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g[now].size() == <span class="number">1</span> &amp;&amp; now != <span class="number">1</span>) &#123;</span><br><span class="line">        siz[now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[now]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.to != lst) &#123;</span><br><span class="line">            dfs(i.to, now);</span><br><span class="line">            siz[now] += siz[i.to];</span><br><span class="line">            i.cnt = siz[i.to];</span><br><span class="line">            q.push(i);</span><br><span class="line">            sum += i.cnt * i.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        read(n), read(s);</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            read(u), read(v), read(w);</span><br><span class="line">            g[u].push_back((Edge)&#123;v, w, <span class="number">0</span>&#125;);</span><br><span class="line">            g[v].push_back((Edge)&#123;u, w, <span class="number">0</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; s) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            Edge tmp = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            sum -= (tmp.w - tmp.w / <span class="number">2</span>) * tmp.cnt;</span><br><span class="line">            tmp.w /= <span class="number">2</span>;</span><br><span class="line">            q.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 树上问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF1399D] Binary String To Subsequences</title>
      <link href="/2020/08/06/CF1399D-Binary-String-To-Subsequences/"/>
      <url>/2020/08/06/CF1399D-Binary-String-To-Subsequences/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/contest/1399/problem/D" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出长度为 $n$ 的 $01$ 字符串 $s$，要求将其划分成个数最少的子序列使得每个子序列中相同的数不相邻，如 $101010$。输出个数最少的一种划分方案。$1 \le n \le 2 \cdot 10^5$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>感谢 woshiluo 神仙（</p><p>划分的方法其实是很显然的，主要是怎么实现。</p><p>考虑构造两个队列，分别存当前以 $1$ 结尾和以 $0$ 结尾的子序列的编号。</p><p>然后我相信大家都会做了。剩下的就是按照题意模拟了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">int</span> t, n, s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        read(n);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q0, q1;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a + <span class="number">1</span>;</span><br><span class="line">        s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (q1.empty()) &#123;</span><br><span class="line">                    q0.push(++s);</span><br><span class="line">                    ans[i] = s;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans[i] = q1.front();</span><br><span class="line">                    q0.push(q1.front());</span><br><span class="line">                    q1.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (q0.empty()) &#123;</span><br><span class="line">                    q1.push(++s);</span><br><span class="line">                    ans[i] = s;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans[i] = q0.front();</span><br><span class="line">                    q1.push(q0.front());</span><br><span class="line">                    q0.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF52C] Circular RMQ</title>
      <link href="/2020/08/04/CF52C-Circular-RMQ/"/>
      <url>/2020/08/04/CF52C-Circular-RMQ/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="http://codeforces.com/problemset/problem/52/C" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个长度为 $n$ 的环形数列，有 $m$ 次操作，要求支持区间加，求区间最小值。$1 \le n \le 2 \cdot 10^5, |a_i, v| \le 10^6, 0 \le m \le 2 \cdot 10^5$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于正常的 $l \le r$，直接修改区间 $[l, r]$ 即可。</p><p>对于 $r &gt; l$，需要修改区间 $[l, n]$ 和 $[1, r]$。</p><p>查询同理。</p><p>顺便学习了一下永久性标记的用法，注意到标记其实是不会溢出的，那么就可以不下传标记，在询问的时候把标记对答案的影响加到答案中即可。</p><p>另外对于这个毒瘤输入强烈鄙视。</p><p>注意开 <code>long long</code>。</p><p>至于为什么会来写这种题，大概是因为在主页看到了好几个这道题的求助吧。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    LL tag, v;</span><br><span class="line">&#125; t[<span class="number">800010</span>];</span><br><span class="line"></span><br><span class="line">LL a[<span class="number">200010</span>];</span><br><span class="line">LL tmp;</span><br><span class="line"><span class="keyword">int</span> n, m, lf, rg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[x].l = l, t[x].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[x].v = a[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    buildTree(lson(x), l, mid), buildTree(rson(x), mid + <span class="number">1</span>, r);</span><br><span class="line">    t[x].v = <span class="built_in">std</span>::min(t[lson(x)].v, t[rson(x)].v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= t[x].l &amp;&amp; r &gt;= t[x].r) &#123;</span><br><span class="line">        t[x].tag += d;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[x].l + t[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)  modify(lson(x), l, r, d);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)   modify(rson(x), l, r, d);</span><br><span class="line">    t[x].v = <span class="built_in">std</span>::min(t[lson(x)].v + t[lson(x)].tag, t[rson(x)].v + t[rson(x)].tag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= t[x].l &amp;&amp; r &gt;= t[x].r) <span class="keyword">return</span> t[x].v + t[x].tag;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[x].l + t[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL s = <span class="number">1145141919810</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)  s = <span class="built_in">std</span>::min(s, query(lson(x), l, r));</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)   s = <span class="built_in">std</span>::min(s, query(rson(x), l, r));</span><br><span class="line">    <span class="keyword">return</span> s + t[x].tag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i]);</span><br><span class="line">    buildTree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    read(m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;lf, &amp;rg);</span><br><span class="line">        ++lf, ++rg;</span><br><span class="line">        <span class="keyword">if</span> (getchar() == <span class="string">'\n'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lf &lt;= rg)   <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, lf, rg));</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="built_in">std</span>::min(query(<span class="number">1</span>, <span class="number">1</span>, rg), query(<span class="number">1</span>, lf, n)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;tmp);</span><br><span class="line">            <span class="keyword">if</span> (lf &lt;= rg)   modify(<span class="number">1</span>, lf, rg, tmp);</span><br><span class="line">            <span class="keyword">else</span> modify(<span class="number">1</span>, <span class="number">1</span>, rg, tmp), modify(<span class="number">1</span>, lf, n, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIp2012] 借教室</title>
      <link href="/2020/08/02/NOIp2012-%E5%80%9F%E6%95%99%E5%AE%A4/"/>
      <url>/2020/08/02/NOIp2012-%E5%80%9F%E6%95%99%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/2606" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：有 $n$ 天，每天有 $r_i$ 个可以借出去的教室。有 $m$ 份订单借教室，每份订单从第 $s_i$ 天到第 $t_i$ 天借 $d_i$ 个教室，按照订单的先后顺序分配教室，判断是否会有订单无法完全满足。$1 \le n, m \le 10^6, 0 \le r_i, d_i \le 10^9, 1 \le s_i \le t_i \le n$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>显然这道题会用到差分。</p><p>题目让求出最早一个不能满足的订单，显然可以二分。</p><p>然后这道题就做完了。</p><p>我的代码求的是最后一个可以满足的订单，所以要加 $1$ 才是正确答案。</p><p>时间复杂度 $O(n \log m)$。</p><p>当然还有别的做法，比如线段树维护区间最小值之类的。</p><p>另外还有一个 $O(n + m)$ 的做法，先假设所有订单都满足，然后一天天枚举，如果有一天不符合就从后往前撤掉订单，最后一个撤掉的即为答案。</p><p>（羡慕提高 Day2 T2 是这种题的日子……）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">1000010</span>], d[<span class="number">1000010</span>], s[<span class="number">1000010</span>], t[<span class="number">1000010</span>], diff[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::fill(diff + <span class="number">1</span>, diff + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) &#123;</span><br><span class="line">    diff[s[i]] += d[i];</span><br><span class="line">    diff[t[i] + <span class="number">1</span>] -= d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    diff[i] += diff[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (diff[i] &gt; r[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)read(r[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)read(d[i]), read(s[i]), read(t[i]);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = m;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (check(mid))l = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line">    <span class="keyword">else</span>r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == m)<span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    <span class="keyword">else</span><span class="built_in">printf</span>(<span class="string">"-1\n%d\n"</span>, ans + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 差分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中考完的一些想法</title>
      <link href="/2020/07/30/%E4%B8%AD%E8%80%83%E5%AE%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
      <url>/2020/07/30/%E4%B8%AD%E8%80%83%E5%AE%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><meting-js    id="28754448"    server="netease"    type="song"><br></meting-js></p><p>虽然结果不算很好，但也算没有啥后悔的吧。</p><a id="more"></a><p>最后还是留在了八一……看到身边朋友都理所应当的去了一中，心中有点奇怪的感觉。</p><p>学校的几次 OI 课去上了……感觉挺轻松的（？），基本上每次小测都能 AK（这种知识点不 AK 才有问题吧）。</p><p>虽然还是有神仙贪心不会做（瞬间打脸）。</p><p>希望可以改变这所学校在 OI 上的劣势，毕竟某公众号上”其他学校水平太低，参与热情不高“实在是有点过了吧？</p><p>如果在役时可以让新疆进行省选就好了，可能离所谓的强省还有很大的差距，但是我相信会有改变的那一天的。</p><p>前几天 CCF 建议我省省队参加线上赛……不知道该说什么，就像知乎上评论的那样，如果新疆是每年稳定提供国集的省份就应该不会是这样的解决方案吧。</p><p>现在的我还是太弱了，什么也做不到……</p><p>打了几次 CF，感觉自己还是挺菜的，配不上 Expert 这个名字。</p><p>莫名其妙的又来了疫情……具体并不是很想谈论，希望它赶紧过去吧，我已经恰了一周泡面了（哭）。</p><p>报了某机构的线上课，果然是被内地神仙吊打，一句“立方展开不是初中内容吗？“给我整傻了。</p><p>毕业典礼结束后学校还上了十几天的课，原本以为是预科，没想到是偏竞赛的。</p><p>那几天觉得学校十分投机，趁着强基来搞这个。但是现在看来好像并不是……我省现在还在用老教材，这次理科二卷最后一道题是某书原题，还是个不等式，普通高中生没学过估计是直接懵逼了吧。</p><p>这十几天还讲了一点不等式，均值和柯西算是把公式给了，题目一道都不会做。</p><p>还好必修一课内内容好像不算很难……试着向学校争取一下多放点精力在 OI 上吧。</p><p>本来还想着去一中参观一下，结果也没戏了。</p><p>除了 OI 以外其实也挺想学学 MO 的，但是这个线上课感觉掌握程度物理 &gt; 化学 &gt; 数学，正好和我自己想的完全相反。</p><p>不过毕竟还没上完，可能上完以后又不一样了吧。</p><p>情感方面，现在决定了保送了就谈恋爱，众所周知我在各方面都不可能保送，得出结论不谈恋爱。</p><p>而且我这个性格也不适合，再加上可能有些人格障碍的倾向……（？）</p><p>这个暑假准备把 The Division 打完，AC:U 打完，打一打 MC，看点番，推下脏翅膀（你推了几年了！），然后随便学点东西吧。</p><p>（强烈推荐悠久之翼，关弹幕保智商）</p><p>说起来今年西电啥时候请客旅游啊？（逃）</p><p>现在心理状况比之前好了一些，至少不会动不动做一些很…的事情了，认识了一些很好的人们，不然的话不知道我还能不能敲下这些文字。</p><p>等到暑假过完，就要开始学习了吧……初中生活实在是太失败，也懂了很多，自己只不过是历史车轮下一个微不足道的普通人，没有什么过人的天赋，只希望自己能够”从平凡中闪耀出伟大“吧。</p><p>一直喜欢这样的故事：未来不可逆转的朝着崩坏的那一端前进，人们依然努力想要改变。这样的故事总是给我一种悲壮的感觉。可能这也是我比较喜欢脏翅膀的原因吧。当下的美好和繁华只不过是表面，明知可能不久就要离开，还选择尽可能的创造一些微小的美丽。</p><p>悠久之翼的最后也提到了，不要回首之前的事情，抓住当下，或许我们创造的一切事物不过是镜花水月，但也是我们曾珍惜过的，用心了的。久濑说他从来不参加没有胜算的游戏，因此活的那样扭曲，其实只要努力过，最终的结果可能真的没有那么重要吧。</p><p>当然也只不过是嘴上说说而已。</p><p>看完悠久之翼以后就想要成为优子那样的天使，虽然可能只不过是梦想了……</p><p>雨宫优子也是我唯一一个更喜欢百度百科的词条，这里贴上<a href="https://baike.baidu.com/item/%E9%9B%A8%E5%AE%AB%E4%BC%98%E5%AD%90" target="_blank" rel="noopener">链接</a>。</p><p>就写到这里吧，天已经完全亮了，又是一晚没有睡觉。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[洛谷 P4145] 上帝造题的七分钟2 / 花神游历各国</title>
      <link href="/2020/07/30/%E6%B4%9B%E8%B0%B7-P4145-%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F2-%E8%8A%B1%E7%A5%9E%E6%B8%B8%E5%8E%86%E5%90%84%E5%9B%BD/"/>
      <url>/2020/07/30/%E6%B4%9B%E8%B0%B7-P4145-%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F2-%E8%8A%B1%E7%A5%9E%E6%B8%B8%E5%8E%86%E5%90%84%E5%9B%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P4145" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给定长度为 $n$ 的序列和 $m$ 次操作，要求支持区间开方，区间求和。$1 \le n, m \le 10^5$，序列中的数 $0 &lt; a_i \le 10^{12}$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>每次听数据结构都要把这道题拿出来说……</p><p>考虑区间开方：至少在我的认知范围内，没有比暴力更优的做法。</p><p>注意到开方其实是会让一个数急剧缩小的，$10^{12}$ 只需要开 $6$ 次平方就可以变成 $1$，然后再对 $1$ 开方就没有什么用了。</p><p>所以我们可以暴力开方，如果一段区间内的所有数都是 $1$ 就直接不管他。</p><p>实现的话可以维护一个最大值，如果区间最大值是 $1$ 就不继续修改。</p><p>注意开 <code>long long</code>，然后是喜闻乐见的特判 $l &gt; r$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    LL v, maxv;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">&#125; t[<span class="number">400010</span>];</span><br><span class="line"></span><br><span class="line">LL a[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rson</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    t[x].v = t[lson(x)].v + t[rson(x)].v;</span><br><span class="line">    t[x].maxv = <span class="built_in">std</span>::max(t[lson(x)].maxv, t[rson(x)].maxv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[x].l = l, t[x].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[x].v = t[x].maxv = a[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    buildTree(lson(x), l, mid), buildTree(rson(x), mid + <span class="number">1</span>, r);</span><br><span class="line">    pushUp(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x].l == t[x].r) &#123;</span><br><span class="line">        t[x].v = <span class="built_in">sqrt</span>(t[x].v);</span><br><span class="line">        t[x].maxv = <span class="built_in">sqrt</span>(t[x].maxv);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[x].l + t[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid &amp;&amp; t[lson(x)].maxv &gt; <span class="number">1</span>)    modify(lson(x), l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid &amp;&amp; t[rson(x)].maxv &gt; <span class="number">1</span>)     modify(rson(x), l, r);</span><br><span class="line">    pushUp(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= t[x].l &amp;&amp; r &gt;= t[x].r) <span class="keyword">return</span> t[x].v;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[x].l + t[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)   s += query(lson(x), l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid)    s += query(rson(x), l, r);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i]);</span><br><span class="line">    buildTree(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    read(m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k, l, r;</span><br><span class="line">        read(k), read(l), read(r);</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)  <span class="built_in">std</span>::swap(l, r);</span><br><span class="line">        <span class="keyword">if</span> (!k) modify(<span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(<span class="number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CSP2019] 网格图</title>
      <link href="/2020/07/29/CSP2019-%E7%BD%91%E6%A0%BC%E5%9B%BE/"/>
      <url>/2020/07/29/CSP2019-%E7%BD%91%E6%A0%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P5687" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给定一个 $n \times m$ 的网格图，点 $(i, j)$ 与 $(i, j + 1)$ 间有一条权值为 $a_i$ 的边，点 $(i, j)$ 与 $(i + 1, j)$ 间有一条权值为 $b_j$ 的边，求出这个网格图的最小生成树。$3 \le n, m \le 3 \times 10^5, 1 \le a_i, b_j \le 10^5$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力做法直接 Kruskal 即可。</p><p>考虑 Kruskal 的过程：找出没被取过的最小的边加入，并且加入后不成环。</p><p>这道题目每一行和每一列的值是相同的，所以可以一行或者一列的来讨论。显然边在一整行一整列的加入时是最优的。</p><p>接下来考虑怎么才能不形成环。</p><p>最小的行和最小的列显然不形成环，所以全部加上。</p><p>设现在已经取了 $r$ 行 $c$ 列。</p><p>对于一条将要被加入的行，已经有 $c$ 个点在生成树中，要连的边的总数即为 $m - c$，否则就会与已经连的边形成环。</p><p>注意开 <code>long long</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL ans;</span><br><span class="line">LL a[<span class="number">300010</span>], b[<span class="number">300010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, r, c, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)    read(b[i]);</span><br><span class="line">    <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + m + <span class="number">1</span>);</span><br><span class="line">    ans = a[<span class="number">1</span>] * (m - <span class="number">1</span>) + b[<span class="number">1</span>] * (n - <span class="number">1</span>);</span><br><span class="line">    r = <span class="number">1</span>, c = <span class="number">1</span>, x = <span class="number">2</span>, y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n &amp;&amp; y &lt;= m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x] &lt;= b[y])   ans += a[x++] * (m - c), ++r;</span><br><span class="line">        <span class="keyword">else</span>    ans += b[y++] * (n - r), ++c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 最小生成树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIp2006] 能量项链</title>
      <link href="/2020/07/25/NOIp2006-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/"/>
      <url>/2020/07/25/NOIp2006-%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/10148" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个长度为 $n$ 的首尾相接的序列，每个元素有两个值 $l_i, r_i$，且 $r_i = l_{i + 1}, r_{n} = l_{1}$。任意两个元素可以合并成一个元素并获得 $l_i \times r_i \times r_{i + 1}$ 的价值，求将整个序列合并的最大价值。$4 \le n \le 100$，保证结果在 <code>int</code> 范围内。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先套路处理环。</p><p>设 $f(i, j)$ 为从 $i$ 合并到 $j$ 的最大价值，转移很显然：$f_{i, j} = \max(f_{i, k} + f_{k + 1, j} + l_i \times r_k \times r_j)(k \in [i, j))$。</p><p>最终答案为 $\max(f_{i, i + n - 1})(1 \le i \le n)$。</p><p>注意控制下边界，不过都是套路了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">&#125; a[<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i].l), a[i + n].l = a[i].l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + n; ++i) a[i].r = a[i + <span class="number">1</span>].l;</span><br><span class="line">    a[n].r = a[<span class="number">1</span>].l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>; l &lt;= n; ++l) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + n &amp;&amp; i + l - <span class="number">1</span> &lt;= n + n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + l - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; j; ++k) &#123;</span><br><span class="line">                f[i][j] = <span class="built_in">std</span>::max(f[i][j], f[i][k] + f[k + <span class="number">1</span>][j] + a[i].l * a[k].r * a[j].r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    ans = <span class="built_in">std</span>::max(ans, f[i][i + n - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 区间 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ABC079D] Wall</title>
      <link href="/2020/07/08/ABC079D-Wall/"/>
      <url>/2020/07/08/ABC079D-Wall/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://atcoder.jp/contests/abc079/tasks/abc079_d?lang=en" target="_blank" rel="noopener">题目链接</a>   </p><p>题目大意：把数字 $i$ 变成 $j$ 需要 $c_{i, j}$ 花费，现在要将 $H \cdot W$ 个数字变为 $1$，求最小花费。$1 \le H, W \le 200, 1 \le c_{i, j} \le 10^3$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>（沉迷水题无法自拔…）</p><p>显然对给出的 $c$ 矩阵做最短路即可，直接 Floyd。</p><p>这题的 $H, W$ 完全能给成 $H \cdot W \le 10^7$ 的说…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> h, w, ans, a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(h), read(w);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line">            read(c[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; ++k)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line">                c[i][j] = <span class="built_in">std</span>::min(c[i][j], c[i][k] + c[k][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; ++j)</span><br><span class="line">            read(a), ans += a == <span class="number">-1</span> ? <span class="number">0</span> : c[a][<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 最短路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIp2012] 国王游戏</title>
      <link href="/2020/07/06/NOIp2012-%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/"/>
      <url>/2020/07/06/NOIp2012-%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/2603" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：国王要给 $n$ 个大臣发金币。国王和每个大臣都在左手上写一个数字 $a$，右手上写一个数字 $b$，每个大臣得到的金币是他左手边所有人左手上数字的乘积除以这个大臣右手上的数字（向下取整），要求获得金币最多的大臣得到的金币最少。$1 \le n \le 10^3, 0 &lt; a, b &lt; 10^4$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>现在任取两位相邻的大臣，设他们左手上的数字为 $a_1, a_2$，右手上的数字为 $b_1, b_2$。</p><p>设这两位大臣左边的所有大臣（包括国王）左手上的数的乘积为 $A$。</p><p>如果 $1$ 号大臣排在前面，答案为 $\max(\dfrac{A}{b_1}, \dfrac{A \cdot a_1}{b_2})$。</p><p>如果 $2$ 号大臣排在前面，答案为 $\max(\dfrac{A}{b_2}, \dfrac{A \cdot a_2}{b_1})$。</p><p>设 $m = \dfrac{A}{b_1}, n = \dfrac{A \cdot a_1}{b_2}, p = \dfrac{A}{b_2}, q = \dfrac{A \cdot a_2}{b_1}$。</p><p>显然有 $q &gt; m, n &gt; p$。</p><p>假设 $1$ 号大臣排在前面时答案更小，那么可以判断出 $n &lt; q$。</p><p>即 $\dfrac{A \cdot a_1}{b_2} &lt; \dfrac{A \cdot a_2}{b_1}$。</p><p>化简可得 $a_1 \cdot b_1 &lt; a_2 \cdot b_2$。</p><p>所以要按 $a_i \cdot b_i$ 升序排序。</p><p>这道题要写高精度，我放弃了，明 天 一 定。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平面几何里一些不会做的题</title>
      <link href="/2020/07/05/%E5%B9%B3%E9%9D%A2%E5%87%A0%E4%BD%95%E9%87%8C%E4%B8%80%E4%BA%9B%E4%B8%8D%E4%BC%9A%E5%81%9A%E7%9A%84%E9%A2%98/"/>
      <url>/2020/07/05/%E5%B9%B3%E9%9D%A2%E5%87%A0%E4%BD%95%E9%87%8C%E4%B8%80%E4%BA%9B%E4%B8%8D%E4%BC%9A%E5%81%9A%E7%9A%84%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>一些我太菜导致不能一眼出答案的平面几何，记录一下。</p><a id="more"></a><h3 id="题-1"><a href="#题-1" class="headerlink" title="题 1"></a>题 1</h3><p>已知直线 $l$ 切 $\triangle ABC$ 外接圆于点 $C$，$AD \perp BC$ 于点 $D$，$BE \perp AC$ 于点 $E$，$EG \perp l$ 于点 $G$，$DF \perp l$ 于点 $F$。求证：$EG = DF$。</p><p><img src="https://i.loli.net/2020/07/05/516WB42yXCmjvli.png" alt="image.png"></p><p>已有一组对边平行，考虑证四边形 $EDFG$ 是平行四边形。</p><p>证明：连接 $DE$。</p><p>由 $AD \perp BC, BE \perp AC$ 得 $A, B, D, E$ 四点共圆。</p><p>则 $\angle CDE = \angle BAC = \angle DCF$。</p><p>则 $DE // FG$，又因为 $EG // DF$，则四边形 $EDFG$ 是矩形，即 $EG = DF$。</p><h3 id="题-2（切线定理）"><a href="#题-2（切线定理）" class="headerlink" title="题 2（切线定理）"></a>题 2（切线定理）</h3><p>如图，在 $\triangle ABC$ 中，已知 $AD \perp BC, BE \perp CA$，$AD$ 与 $BE$ 相交于点 $H$，$P$ 为边 $AB$ 的中点，过点 $C$ 作 $CQ \perp PH$，垂足为 $Q$。求证：$PE^2 = PH \cdot PQ$。</p><p><img src="https://i.loli.net/2020/07/05/863Xz5Ci2rEeAWT.png" alt="image.png"></p><p>考虑使用切线定理。</p><p>证明：</p><p>由 $AD \perp BC, BE \perp CA$，得 $E, H, D, C$，$A, E, D, B$ 是两组四点共圆。</p><p>又因为 $CQ \perp PH$，则 $E, H, D, C, Q$ 五点共圆，设圆心为 $O$，则只需证 $PE$ 是圆 $O$ 切线。</p><p>（并没有找到圆的那个符号该怎么打…如果您找到了欢迎您告诉我…）</p><p>连接 $DE$，由 $P$ 是 $AB$ 中点可得 $\angle PEB = \angle PBE = \angle EDH$。</p><p>则 $PE$ 是圆 $O$ 切线，即 $PE^2 = PH \cdot PQ$。</p><h3 id="题-3（圆，三角形）"><a href="#题-3（圆，三角形）" class="headerlink" title="题 3（圆，三角形）"></a>题 3（圆，三角形）</h3><p>如图，$\triangle ABC$ 的内切圆分别切 $AB, AC$ 于点 $E, F$，$D$ 是 $BC$ 的中点，$\angle B, \angle C$ 的平分线分别与直线 $EF$ 交于点 $N, M$。证明：$DM = DN$。</p><p><img src="https://i.loli.net/2020/07/05/o53CEl7WbPtUkM6.png" alt="image.png"></p><p>考虑证 $B, M, N, C$ 四点共圆且 $BC$ 为直径。</p><p>证明：</p><p>由题得 $AE = AF$，则 $\angle AEF = \angle AFE = \dfrac{\pi - \angle A}{2}$。</p><p>由 $I$ 是 $\triangle ABC$ 内心得 $\angle BIC = \dfrac{\pi + \angle A}{2}$。</p><p>则 $\angle MIB = \pi - \angle BIC = \dfrac{\pi - \angle A}{2} = \angle AEF$。</p><p>则 $E, M, I, B$ 四点共圆，同理得 $F, N, I, C$ 四点共圆。</p><p>则 $\angle BMI = \angle BEI = 90^\circ$，同理得 $\angle BNC = 90^\circ$，即 $B, M, N, C$ 四点共圆且 $BC$ 为直径。</p><p>由 $D$ 是 $BC$ 中点，得 $DM = DN$。</p><p>（注：这个图画的并不规范，$D$ 不一定在圆 $I$ 上）</p><h3 id="题-4（割线定理）"><a href="#题-4（割线定理）" class="headerlink" title="题 4（割线定理）"></a>题 4（割线定理）</h3><p>如图，已知 $AB, CD$ 是半径为 $R$ 的圆 $O$ 的两条直径，且 $\angle AOC = \dfrac{\pi}{3}$，点 $P$ 在劣弧 $BC$ 上，连接 $PA, PD$ 分别交 $CD, AB$ 于点 $E, F$，求证：$AE \cdot AP + DF \cdot DP$ 为定值。</p><p><img src="https://i.loli.net/2020/07/05/mgviFNydCb3Hlj8.png" alt="image.png"></p><p>考虑用已知值表示这个式子。</p><p>证明：</p><p>由 $\angle AOC = \dfrac{\pi}{3}$ 得 $\angle AOD = 120^\circ$，则 $\angle P = 60^\circ = \angle AOC$。</p><p>则 $O, E, P, F$ 四点共圆，即 $AE \cdot AP = AO \cdot AF, DF \cdot DP = DO \cdot DE$。</p><p>连接 $AC$，易证 $\angle AEC \cong \triangle DFO$。</p><p>则 $AE \cdot AP + DF \cdot DP = AO \cdot AF + DO \cdot DE = R \cdot (R + OF) + R \cdot (R + OE) = 2R^2 + R \cdot (OF + OE) = 3R^2$。</p><h3 id="题-5（割线定理）"><a href="#题-5（割线定理）" class="headerlink" title="题 5（割线定理）"></a>题 5（割线定理）</h3><p>如图，圆内接四边形 $ABCD$ 中，$AC$ 与 $BD$ 交于点 $Q$，$BA$ 与 $CD$ 交于点 $P$，求证：$PQ^2 = PA \cdot PB - QB \cdot QD$。</p><p><img src="https://i.loli.net/2020/07/05/bAeZQoYfgvnKtIl.png" alt="image.png"></p><p>考虑构造圆来使用割线定理。</p><p>证明：设直线 $PQ$ 与 $\triangle ABQ$ 的外接圆交于点 $E$，则 $A, B, E, Q$ 四点共圆。</p><p>则 $PA \cdot PB = PQ \cdot PE$，$PA \cdot PB - PQ^2 = PQ \cdot QE$。</p><p>则只需证 $B, E, D, P$ 四点共圆。</p><p>由 $\angle E = \pi - \angle BAC = \pi - \angle BDC = \angle PDB$，得 $B, E, D, P$ 四点共圆。</p><p>则 $BQ \cdot QD = PQ \cdot PE$。</p><p>则 $PA \cdot PB - PQ^2 = QB \cdot QD$，即 $PQ^2 = PA \cdot PB - QB \cdot QD$。</p><h3 id="题-6（割线定理）"><a href="#题-6（割线定理）" class="headerlink" title="题 6（割线定理）"></a>题 6（割线定理）</h3><p>如图，凸四边形 $ABCD$ 内接于圆 $O$，若 $BA$ 交 $CD$ 于点 $P$，$AD$ 交 $BQ$ 于点 $Q$，求证：$PQ^2 = P$ 的幂 $+$ $Q$ 的幂。</p><p><img src="https://i.loli.net/2020/07/05/NjwGYpR7k2QPq5Z.png" alt="image.png"></p><p>与上题相似，请读者自行证明。</p><h3 id="题-7（三角形，圆）"><a href="#题-7（三角形，圆）" class="headerlink" title="题 7（三角形，圆）"></a>题 7（三角形，圆）</h3><p>如图，已知 $O, G, H$ 分别是 $\triangle ABC$ 的外心、重心、垂心，$D$ 为 $BC$ 边上的中点，证明：（1）$H$ 关于 $BC$ 边的对称点 $H’$ 在 $\triangle ABC$ 的外接圆上；（2）$AH = 2OD$；（3）$O, G, H$ 三点共线。</p><p><img src="https://i.loli.net/2020/07/05/TxBSHCzZlob3U2v.png" alt="image.png"></p><p>一道比较综合的题目，考察了外心，重心，垂心的性质，四点共圆和同一法的运用。</p><p>证明：</p><p>（1）显然，略去不证。</p><p>（2）连接 $BO$，延长交圆 $O$ 于点 $E$，连接 $AE, EC$。</p><p>显然 $OD$ 是 $\triangle BCE$ 的中位线，即 $CE = 2OD$。</p><p>只需证四边形 $AECH$ 是平行四边形。</p><p>显然有 $CE \perp BC, AH \perp BC, CH \perp AB, EA \perp BA$，即四边形 $AECH$ 是平行四边形。</p><p>则 $AH = CE = 2OD$。</p><p>（3）连接 $AD$ 交 $OH$ 于 $G’$，下证 $G’$ 与 $G$ 是同一个点。</p><p>显然有 $\triangle OG’D \sim \triangle AG’H$。</p><p>由（2）得 $OD : AH = 1 : 2$，则 $DG’ : G’A = 1 : 2$。</p><p>又因为 $G$ 是 $\triangle ABC$ 的重心，则 $DG : GA = 1 : 2$。</p><p>即 $G’$ 与 $G$ 是同一个点，$O, G, H$ 三点共线。</p><p>（注：这条线被称为欧拉线）</p>]]></content>
      
      
      <categories>
          
          <category> MO </category>
          
          <category> 平面几何 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF1371D] Grid-00100</title>
      <link href="/2020/07/03/CF1371D-Grid-00100/"/>
      <url>/2020/07/03/CF1371D-Grid-00100/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/contest/1371/problem/D" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：构造一个 $n \times n$ 的 $01$ 矩阵 $A$，其中有 $k$ 个 $1$，定义 $r_{i} = \sum \limits_{j=1}^{n}A_{i, j}(1 \le i \le n)$，$c_j = \sum \limits_{i=1}^{n}A_{i, j}(1 \le j \le n)$，$f(A) = (\max(r) - \min(r)) ^ 2 + (\max(c) - \min(c)) ^ 2$，使得 $f(A)$ 最小。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>（orz woshiluo）</p><p>考虑什么时候能够使 $\max(r) - \min(r)$ 最小，显然当 $1$ 平均分布在每一行时是最小的。</p><p>$\max(c) - \min(c)$ 的情况同理。</p><p>于是就需要将 $1$ 平均放置在矩阵中。</p><p>那就可以按照对角线的规律放置 $1$，如果到了 $(n, n)$ 就从 $(1, 2)$ 或者 $(2, 1)$ 开始继续放置。</p><p>这样就可以让 $1$ 平均分布。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">310</span>][<span class="number">310</span>];</span><br><span class="line"><span class="keyword">int</span> r[<span class="number">310</span>], c[<span class="number">310</span>];</span><br><span class="line"><span class="keyword">int</span> t, n, k, maxr, maxc, minr, minc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        read(n), read(k);</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">std</span>::fill(r + <span class="number">1</span>, r + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">std</span>::fill(c + <span class="number">1</span>, c + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        maxr = maxc = <span class="number">0</span>;</span><br><span class="line">        minr = minc = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">            a[x][y] = <span class="number">1</span>;</span><br><span class="line">            ++x, ++y;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; n)  x = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (y &gt; n)  y = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (a[x][y]) ++x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                r[i] += a[i][j];</span><br><span class="line">                c[j] += a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            maxr = <span class="built_in">std</span>::max(maxr, r[i]);</span><br><span class="line">            minr = <span class="built_in">std</span>::min(minr, r[i]);</span><br><span class="line">            maxc = <span class="built_in">std</span>::max(maxc, c[i]);</span><br><span class="line">            minc = <span class="built_in">std</span>::min(minc, c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (maxr - minr) * (maxr - minr) + (maxc - minc) * (maxc - minc));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 构造 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[USACO06FEB] Treats for the Cows</title>
      <link href="/2020/07/01/USACO06FEB-Treats-for-the-Cows/"/>
      <url>/2020/07/01/USACO06FEB-Treats-for-the-Cows/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P2858" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：有 $n$ 个物品排成一排，每个物品有一个初始价值 $v_i$。每次可以从两端取一个物品获得 $av_i$ 的价值，其中 $a$ 表示这个物品是第 $a$ 个取出的，求取完物品的最大价值。$1 \le n \le 2 \cdot 10^3, 1 \le v_i \le 10^3$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>好像是考完试做的第一道不是水题的题？</p><p>考虑 DP。</p><p>设 $f(i, j)$ 表示取完区间 $[i, j]$ 后获得的最大价值。</p><p>不难发现区间 $[i, j]$ 的长度 $l$ 就是 $n - a + 1$，那么我们就可以在枚举区间的时候顺带算出 $a$。</p><p>状态转移方程：</p><p>$$<br>f(i, j) = \max(av_i + f(i + 1, j), av_j + f(i, j - 1))<br>$$</p><p>其中 $a = n - l + 1$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + l - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + l - <span class="number">1</span>;</span><br><span class="line">            f[i][j] = <span class="built_in">std</span>::max(v[i] * (n - l + <span class="number">1</span>) + f[i + <span class="number">1</span>][j], f[i][j - <span class="number">1</span>] + v[j] * (n - l + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>][n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 区间 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF1374E1] Reading Books(easy version)</title>
      <link href="/2020/07/01/CF1374E1-Reading-Books-easy-version/"/>
      <url>/2020/07/01/CF1374E1-Reading-Books-easy-version/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/problemset/problem/1374/E1" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：有 $n$ 本书，读第 $i$ 本书需要 $t_i$ 的时间。如果 Alice 喜欢第 $i$ 本书，则 $a_i = 1$，如果 Bob 喜欢第 $i$ 本书，则 $b_i = 1$。求每个人都读了至少 $k$ 本喜欢的书时所需时间的最小值。$1 \le k \le n \le 2 \cdot 10^5, 1 \le t_i \le 10^4$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>Div 3 的降智题……</p><p>可能是因为我睡着了没做出来？</p><p>考虑构造三个数组，分别存 Bob 喜欢的，Alice 喜欢的，Bob 和 Alice 都喜欢的书，然后排序做前缀和。</p><p>如果取了 $i$ 本都喜欢的书，则剩余两个就要取 $k - i$ 个，枚举 $i$ 更新答案即可。</p><p>注意控制 $i$ 的范围。</p><p>（其实没有听懂 woshiluo 神仙的做法（雾））</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL a1[<span class="number">200010</span>], a2[<span class="number">200010</span>], a3[<span class="number">200010</span>], f1[<span class="number">200010</span>], f2[<span class="number">200010</span>], f3[<span class="number">200010</span>];</span><br><span class="line">LL n, k, ans = <span class="number">0x7f7f7f7f</span>, n1, n2, n3;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, t, a, b; i &lt;= n; ++i) &#123;</span><br><span class="line">        read(t), read(a), read(b);</span><br><span class="line">        <span class="keyword">if</span> (a &amp;&amp; b) a3[++n3] = t;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span> (a)  a1[++n1] = t;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span> (b)  a2[++n2] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n1 + n3 &lt; k || n2 + n3 &lt; k) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(a1 + <span class="number">1</span>, a1 + n1 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(a2 + <span class="number">1</span>, a2 + n2 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(a3 + <span class="number">1</span>, a3 + n3 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; ++i)   f1[i] = f1[i - <span class="number">1</span>] + a1[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n2; ++i)   f2[i] = f2[i - <span class="number">1</span>] + a2[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n3; ++i)   f3[i] = f3[i - <span class="number">1</span>] + a3[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">std</span>::max(<span class="number">0L</span>L, k - <span class="built_in">std</span>::min(n1, n2)); i &lt;= <span class="built_in">std</span>::min(n3, k); ++i) &#123;</span><br><span class="line">        LL s = f3[i] + f1[k - i] + f2[k - i];</span><br><span class="line">        ans = <span class="built_in">std</span>::min(ans, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无题</title>
      <link href="/2020/06/17/%E6%97%A0%E9%A2%98/"/>
      <url>/2020/06/17/%E6%97%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>大概这就是命运吧。</p><p><meting-js    id="41416774"    server="netease"    type="song"><br></meting-js></p><a id="more"></a><p>很久没有写文章了呢。今天作业比较少所以来水一篇吧。</p><p>虽然说周末就要中考了。</p><p>但是已经没有什么意义了。</p><p>说实话在很久之前我就有隐隐约约的预感觉得自己真的还要在这所学校度过高中……但是果然还是有那么点遗憾。</p><p>文化课的成绩果然处于了那个极其尴尬的位置。</p><p>最后还是放弃了挣扎，心里想着早早把这些事情弄完。</p><p>签的过程很顺利，签了一份自招一份年级里的保送生。</p><p>出来之后问了一圈，告诉我那个保送生协议其实是可以在考后撕掉的。</p><p>但是我这种情况也无能为力的吧。</p><p>不过也不全是坏事：家里能好好的再修饰一下，准备把墙角的那堆杂物搬掉然后放个桌子，这样我就不用整天坐在电脑面前学文化课了。</p><p>顺便买个 Surface Go 2，原本想着买 MacBook 的，但是我可能还是喜欢这种比较轻能触屏有笔的笔记本吧。</p><p>签完之后问了一圈一中学长，普遍反映我脑子坏了。</p><p>不过现在也不是那么后悔了，毕竟这能怪谁呢，二模三模都因为很智障的错误考的很烂，数学一次 140.5，一次 135。</p><p>二模可能是因为有些点的确不会，但是三模这个分数真的让我无法接受。</p><p>我不知道为什么……无论是 OI，还是文化课，总是犯一些很简单的错误。把 kettle 打成 Kettle，每次都是这样。</p><p>准备假期有机会去一中看一看，就当满足自己的心愿了吧。</p><p>感觉自己的 OI 水平倒退的太过厉害……二分都快不会写了……</p><p>以前可能 10min 就能写完的题现在一中午调不出来……</p><p>看到学校跟不知道什么培训机构合作，大概找 woshiluo 看了一眼，好像看起来挺厉害的样子。</p><p>自己的负面情绪也依旧那么重，但是比之前要好一些了。</p><p>买了把美工刀放在桌角，把刀刃一直放在外面（<del>其实是因为我收不回去了</del>）。</p><p>假期想好好补一补 OI 呢……想陪一陪她呢……</p><p>想早点把高中的课学的差不多然后专心学这个……但是大环境真的还能让我这么做吗？</p><p>学校好像不是很反对了，至少这点上还是有进步的。</p><blockquote><p>一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程。</p></blockquote><p>看到 BJOI 被取消了，今年 NOI 150 个 Ag，心情莫名地复杂。</p><p>五个月之后又是 NOIp 的日子，想进省队，但是我的实力真的允许我进吗……</p><p>我自我感觉我是有实力进的，但是这三次 NOI Online 真的让我的自信心又降低了不少。况且不说什么树状数组和快速求冒泡排序结果，就连水题我也拿不到满分。万一 NOIp 上又来这几次的错误，或者前两年的错误，我真的没脸丢了……</p><p>不知道为什么感觉数学和化学也很有意思……说不定以后要转行了（笑）。</p><p>但是物理我是绝对不会尝试的，简直是神仙学科，真的学不会。</p><p>年级每周一都有作文培优课，不夸张地说我的作文绝对是这些人里面写的最烂的。</p><p>从这几次考试来看，我的语文也就是 120 左右了。这样的话还是有机会上 700 的吧？</p><p>认真学政史学了一段时间……发现这个还是比理科好学多了，排名比以前要高很多。</p><p>这也是为数不多的让我不那么难受的事实了。</p><p>至于物化，感觉时间还是不够。如果给我三个小时差不多（雾）。</p><p>英语就不管了，这种科目根本拉不开分，我就算再努力考个 148 也不会拉别人多少分。</p><p>语文的现代文部分，这是我最慌的地方。三道选择，一道 4 分，基本属于 “从 4 个对的里面选出 1 个对的” 之类的题。二模的时候我错了两个，刺激。</p><p>前段时间 woshiluo 去打了 ISIJ，感觉好厉害啊。</p><p>Codeforces 我也好久没碰了，上了蓝之后就不打了。</p><p>看到那上面的 Urumqi 不知道啥时候有个 Master 的神仙，懵了。也没听说新疆有谁这么强啊。</p><p>好吧……现在已经快 3 点了。</p><p>我已经想逃避了……过几天的考试……</p><p>可能假期要去检查精神，但是我又不敢说出来让我妈知道……</p><p>尝试着用刀划自己，但是还是怕疼，一有疼的感觉就赶紧移开了。</p><p>也没留下什么大的伤口。</p><p>以后真的要在弱省弱校学竞赛了……真的走上了这条道路啊。</p><p>希望我能在两年后不会后悔走过的这条路。</p><p>朋友们好像都想在高中找女朋友之类的……虽然说我现在这个精神状态感觉不是太适合……</p><p>但是看到她的消息果然还是不能忘记之前一起度过的那些日子啊……所以就不会再喜欢上别人了吧……</p><p>梦想这种东西，果然还是有点不切实际吗……</p><p>可能我的确智商比较低，也不够努力，但是果然梦想还是不会那么容易就消散……</p><p>这首歌是我最喜欢的同人曲之一了，不知道为何听过之后就又会不那么抑郁了。</p><blockquote><p>迷い続ける旅路の果てに　僕らは何を見つけるのかな</p></blockquote><blockquote><p>凍えそうになることもあるけど　星は今日も輝いてる</p></blockquote><blockquote><p>明日は明日の　風が吹くから　怖くないよ　笑っていこう</p></blockquote><blockquote><p>僕らの前に広がった　奇跡を　探しに行こう</p></blockquote><p>再熬几天……就能摆脱了吧……</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn Git Branching 记录</title>
      <link href="/2020/04/22/Learn-Git-Branching-%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/04/22/Learn-Git-Branching-%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>有一天 CP Editor 群内：</p><a id="more"></a><p><img src="https://i.loli.net/2020/04/22/XAVwt4J7LNHGuys.png"></p><p>想到我对 Git 也是一窍不通，所以就来学了。</p><h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><p><code>git commit</code> 可以用来创建一个新的提交记录。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br><span class="line">$ git commit</span><br></pre></td></tr></table></figure><p><code>git branch &lt;name&gt;</code> 可以用来创建分支，<code>git checkout &lt;name&gt;</code> 可以切换分支。</p><p>可以通过 <code>git checkout -b &lt;name&gt;</code> 来在创建新分支的同时切换到新分支。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b bugFix</span><br></pre></td></tr></table></figure><p><code>git merge &lt;name&gt;</code> 可以将分支合并到当前分支。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b bugFix</span><br><span class="line">$ git commit</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git commit</span><br><span class="line">$ git merge bugFix</span><br></pre></td></tr></table></figure><p>另外一种合并分支的方法是 <code>git rebase &lt;name&gt;</code>。</p><p>某种程度上可以认为是将指向 LCA 的节点的指针指向另外一个节点。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b bugFix</span><br><span class="line">$ git commit</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git commit</span><br><span class="line">$ git checkout bugFix</span><br><span class="line">$ git rebase master</span><br></pre></td></tr></table></figure><h3 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h3><p>HEAD 指向的是当前分支上最近一次提交记录，可以把它当成某种指针。</p><p>如果要指向分支上的历史版本的记录，可以使用 <code>git checkout &lt;hash-value&gt;</code> 来改变 HEAD 的指向。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout C4</span><br></pre></td></tr></table></figure><p>哈希值太长怎么办？</p><p>另外一种方式是使用相对引用（^）。这里介绍两个简单的用法：</p><ul><li>使用 <code>^</code> 向上移动一个提交记录</li><li>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录</li></ul><p>将操作符 <code>^</code> 加在引用名称后面，表示它的父节点。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout bugFix^</span><br></pre></td></tr></table></figure><p>我们可以用这些命令来强制修改分支位置。如命令 <code>git branch -f master HEAD~3</code>。</p><p>这个命令会将 master 分支强制指向 HEAD 的第 3 级父节点。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -f master C6</span><br><span class="line">$ git branch -f bugFix HEAD~2</span><br><span class="line">$ git checkout HEAD^</span><br></pre></td></tr></table></figure><p>撤销变更的方法主要有两种，<code>git reset</code> 和 <code>git revert</code>。</p><p><code>git reset</code> 可以让当前分支往回移，但只使用于本地。</p><p><code>git revert</code> 则是新建一个提交记录，只不过这是用来撤销用的新记录，内容与要撤销的父节点内容相同。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^</span><br><span class="line">$ git checkout pushed</span><br><span class="line">$ git revert HEAD</span><br></pre></td></tr></table></figure><h3 id="移动提交记录"><a href="#移动提交记录" class="headerlink" title="移动提交记录"></a>移动提交记录</h3><p><code>git cherry-pick</code> 可以自由修改提交树，将目标提交记录直接放在当前位置的下面。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick C3 C4 C7</span><br></pre></td></tr></table></figure><p>但别忘了这里的 C3 C4 C7 都是哈希值，真实的哈希值可是长多了。</p><p>另外一种方法是使用交互式的 rebase（<code>git rebase -i</code>）。</p><p>这个是 UI 界面，很直观。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~4</span><br></pre></td></tr></table></figure><p>然后在 UI 界面里进行操作即可。</p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>第一关很简单。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git cherry-pick C4</span><br></pre></td></tr></table></figure><p>考虑一种情况：</p><p>我们在某分支上进行了一次提交，然后又创建了新分支，然后又提交了一次。</p><p>此时想修改最开始的提交记录，怎么做呢？</p><p>我们可以先用 <code>git rabase -i</code> 进行排序，然后进行修改，然后再恢复到原来的顺序。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD^^</span><br><span class="line">$ git commit --amend</span><br><span class="line">$ git rebase -i HEAD^^</span><br><span class="line">$ git rebase caption master</span><br></pre></td></tr></table></figure><p>使用 <code>git cherry-pick</code> 又是怎么做的呢？</p><p>这里直接给出答案：</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git cherry-pick C2</span><br><span class="line">$ git commit --amend</span><br><span class="line">$ git cherry-pick C3</span><br></pre></td></tr></table></figure><p>我们可以用 <code>git tag</code> 来对一个提交记录作一个类似标记的东西。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0 C1</span><br><span class="line">$ git tag v1 C2</span><br><span class="line">$ git checkout C2</span><br></pre></td></tr></table></figure><p>可以用 <code>git describe &lt;ref&gt;</code> 来描述最近的 tag。</p><p>输出结果为 <code>&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;</code>。tag 表示的是离 ref 最近的标签，numCommits 是表示这个 ref 与 tag 相差有多少个提交记录，hash 表示的是所给定的 ref 所表示的提交记录哈希值的前几位。</p><p>过关命令略。</p><h3 id="高级话题"><a href="#高级话题" class="headerlink" title="高级话题"></a>高级话题</h3><p>在需要多次 rebase 时，记得最后更新 master 分支。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase master bugFix</span><br><span class="line">$ git rebase bugFix side</span><br><span class="line">$ git rebase side another</span><br><span class="line">$ git rebase another master</span><br></pre></td></tr></table></figure><p>还记得 <code>^</code> 吗？其实跟 <code>~</code> 一样可以在后面加上数字，当同一个节点有多个父亲时，可以选择移动到的是第几个父亲。</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch bugWork master ^^2^</span><br></pre></td></tr></table></figure><p><code>git cherry-pick</code> 天下第一！</p><p>过关命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout one</span><br><span class="line">$ git cherry-pick C4 C3 C2</span><br><span class="line">$ git cherry-pick two</span><br><span class="line">$ git cherry-pick C5 C4 C3 C2</span><br><span class="line">$ git branch -f three C2</span><br></pre></td></tr></table></figure><p>Git 的本地操作基本上就是这些了，远程操作等到考完二模再学吧（哭）。</p><p>二模前一天晚上想找个休闲的方式，所以选择了这个（雾）。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[EZEC-1] 出题</title>
      <link href="/2020/04/20/EZEC-1-%E5%87%BA%E9%A2%98/"/>
      <url>/2020/04/20/EZEC-1-%E5%87%BA%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P6433" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出 $n$ 个物品，每个物品有一个价值 $v$ 和空间 $m$，有 $k$ 次机会可以将当前物品的价值翻一倍，每种物品只能进行一次这样的操作，物品最多选 $n - 1$ 个，求最大价值。$1 \le n \le 100, 0 \le m \le 1000$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实不难发现，题目中的 “有一个物品不能取” 这句话其实是废话，因为一般来说背包问题不能全部取完，不取那个不在最终状态里的物品就行了。</p><p>这道题无非就是又加了一维的情况。</p><p>设 $f(i, j)$ 表示体积为 $i$，用了 $j$ 次翻倍时的最大收益。则状态转移方程为 $f(i, j) = \max(f(i - m_k, j) + v_k, f(i - m_k, j - 1) + 2v_k)$。</p><p>注意到每个老师只能用一次，所以枚举 $j$ 时要注意一下范围。</p><p>然后别忘了我们最开始说的那种情况，如果所有物品都能取，那就是一个简单的贪心，注意特判一下。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1010</span>], x[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, ans, t, s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m), read(t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i]), read(x[i]), s += x[i];</span><br><span class="line">    <span class="keyword">if</span> (s &lt;= m) &#123;</span><br><span class="line">        <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a &gt; b;</span><br><span class="line">        &#125; );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; ++i)    ans += a[i] * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = t + <span class="number">1</span>; i &lt; n; ++i) ans += a[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= x[i]; --j) &#123;</span><br><span class="line">            f[j][<span class="number">0</span>] = <span class="built_in">std</span>::max(f[j][<span class="number">0</span>], f[j - x[i]][<span class="number">0</span>] + a[i]);</span><br><span class="line">            ans = <span class="built_in">std</span>::max(ans, f[j][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="built_in">std</span>::min(t, i); ++k) &#123;</span><br><span class="line">                f[j][k] = <span class="built_in">std</span>::max(f[j][k], <span class="built_in">std</span>::max(f[j - x[i]][k] + a[i], f[j - x[i]][k - <span class="number">1</span>] + a[i] * <span class="number">2</span>));</span><br><span class="line">                ans = <span class="built_in">std</span>::max(ans, f[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 背包 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EZEC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[ABC162F] Select Half</title>
      <link href="/2020/04/17/ABC162F-Select-Half/"/>
      <url>/2020/04/17/ABC162F-Select-Half/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://atcoder.jp/contests/abc162/tasks/abc162_f" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出长度为 $n$ 的序列，要求选 $\lfloor\frac{n}{2}\rfloor$ 个不相邻的数使得选出的数的和最大。 $2 \le n \le 2 \times 10^5, |a_i| \le 10^9$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如果没有个数限制，可以用 $f(i, j)(j \in \{0, 1\})$ 表示取或不取第 $i$ 个数时的最大收益。</p><p>但是这道题有个数上的限制。</p><p>考虑偶数的情况，显然答案只有两种可能，取或不取第一个数。</p><p>但是奇数的情况就不一样了，我们发现可能有两个数之间隔了两个数的情况存在，但这也不一定存在。</p><p>考虑 DP，设 $f_i$ 表示取到第 $i$ 个数时的最大收益（$i &gt; 1$），$s_i$ 为隔了一个数得到的前缀和。</p><p>首先考虑第一个取不取，显然，$f_2 = \max(a_2, a_1)$。</p><p>然后考虑第二个取不取，则 $f_3 = \max(f_1 + a_3, f_2)$。</p><p>同样得到 $f_4 = \max(f_2 + a_4, s_3)$。</p><p>则状态转移方程：</p><p>$$<br>\begin{cases}<br>    f_i = \max(f_{i - 1}, f_{i - 2} + a_i) (i \bmod 2 = 1) \<br>    f_i = \max(f_{i - 2} + a_i, s_{i - 1}) (i \bmod 2 = 0) \<br>\end{cases}<br>$$</p><p>感觉这道题的状态转移方程还是挺难想的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL a[<span class="number">200010</span>], f[<span class="number">200010</span>], sum[<span class="number">200010</span>];</span><br><span class="line">LL n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i]);</span><br><span class="line">    sum[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)    sum[i] = sum[i - <span class="number">2</span>] + a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            f[i] = <span class="built_in">std</span>::max(f[i - <span class="number">1</span>], f[i - <span class="number">2</span>] + a[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f[i] = <span class="built_in">std</span>::max(f[i - <span class="number">2</span>] + a[i], sum[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 线性 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF1336A] Linova and Kingdom</title>
      <link href="/2020/04/17/CF1336A-Linova-and-Kingdom/"/>
      <url>/2020/04/17/CF1336A-Linova-and-Kingdom/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://codeforces.com/contest/1336/problem/A" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个 $n$ 个点的有根树，每个城市可以有两种类型 A 和 B，每个 A 城市的幸福度定义为从 A 到根的最短路径上 B 城市的个数，最大化所有 A 城市的幸福度之和。$1 \le n \le 2 \times 10^5$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>有一个很显然的贪心思路，每次一定要取离树根最远的点，考虑预处理到根的距离。</p><p>但是这样有一个问题，如果这个点的父亲结点也被选上了，那么这个点的幸福度会减少。</p><p>发现可以如果选了一个父亲结点，那么总幸福度减少了这个点的子树大小，dfs 的时候减一下就行了。</p><p>注意开 long long。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[<span class="number">200010</span>];</span><br><span class="line">LL siz[<span class="number">200010</span>], dis[<span class="number">200010</span>];</span><br><span class="line">LL n, k, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span> </span>&#123;</span><br><span class="line">    siz[now] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : g[now]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i ^ pa) &#123;</span><br><span class="line">            dis[i] = dis[now] + <span class="number">1</span>;</span><br><span class="line">            dfs(i, now);</span><br><span class="line">            siz[now] += siz[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[now] -= siz[now] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        g[u].push_back(v), g[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(dis + <span class="number">1</span>, dis + n + <span class="number">1</span>, [](LL a, LL b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)    ans += dis[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 树形 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[TJOI2007] 线段</title>
      <link href="/2020/04/11/TJOI2007-%E7%BA%BF%E6%AE%B5/"/>
      <url>/2020/04/11/TJOI2007-%E7%BA%BF%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P3842" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出 $n$ 条线段的左右端点 $l_i, r_i$，求出从 $(1, 1)$ 走到 $(n, n)$ 且完整经过每条线段需要的最小距离。$1 \le n \le 2 \times 10^4$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考虑 DP。</p><p>这道题的状态还是很好想的，设 $f(i, 1)$ 和 $f(i, 2)$ 分别表示走到第 $i$ 行后停在左右端点需要的最小距离。</p><p>初始化 $f(1, 1) = r_i - l_i + r_i - 1, f(1, 2) = r_i - 1$。</p><p>转移其实也很好想，如果上一行停在了左端点，那么停在这一行左端点的距离就是这一行的线段长度加上上一行左端点到这一行右端点的距离，停在这一行右端点的距离就是这一行的线段长度加上上一行左端点到这一行左端点的距离。上一行停在右端点的情况同理。</p><p>状态转移方程：</p><p>$$<br>f(i, j) =<br>\begin{cases}<br>    \min(f(i - 1, 1) + |r_i - l_{i - 1}|, f(i - 1, 2) + |r_i - r_{i - 1}|) + r_i - l_i + 1(j = 1) \\<br>    \min(f(i - 1, 1) + |l_i - l_{i - 1}|, f(i - 1, 2) + |l_i - r_{i - 1}|) + r_i - l_i + 1(j = 2) \\<br>\end{cases}<br>$$</p><p><del>草为什么没对齐</del></p><p>最后别忘了是走到 $(n, n)$，答案还要加上某个距离。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20010</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">20010</span>], r[<span class="number">20010</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(l[i]), read(r[i]);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = r[<span class="number">1</span>] + r[<span class="number">1</span>] - l[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">2</span>] = r[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        f[i][<span class="number">1</span>] = <span class="built_in">std</span>::min(f[i - <span class="number">1</span>][<span class="number">1</span>] + <span class="built_in">abs</span>(r[i] - l[i - <span class="number">1</span>]), f[i - <span class="number">1</span>][<span class="number">2</span>] + <span class="built_in">abs</span>(r[i] - r[i - <span class="number">1</span>])) + r[i] - l[i] + <span class="number">1</span>;</span><br><span class="line">        f[i][<span class="number">2</span>] = <span class="built_in">std</span>::min(f[i - <span class="number">1</span>][<span class="number">1</span>] + <span class="built_in">abs</span>(l[i] - l[i - <span class="number">1</span>]), f[i - <span class="number">1</span>][<span class="number">2</span>] + <span class="built_in">abs</span>(l[i] - r[i - <span class="number">1</span>])) + r[i] - l[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">std</span>::min(f[n][<span class="number">1</span>] + n - l[n], f[n][<span class="number">2</span>] + n - r[n]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 线性 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TJOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[PA2014] Kuglarz</title>
      <link href="/2020/04/09/PA2014-Kuglarz/"/>
      <url>/2020/04/09/PA2014-Kuglarz/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P5994" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：有 $n$ 个杯子，每次可以选一个区间 $l, r$ 并知道 $l, r$ 之间球的总数的奇偶性，求猜出哪些杯子下藏着球需要的最小花费。$1 \le n \le 2 \times 10^3$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>每个杯子下只可能有或没有球，每个区间的球的总数模 $2$ 只可能为 $1$ 或 $0$。</p><p>每一个区间 $l, r$ 的奇偶性相当于 $a_l \operatorname{xor} a_{l + 1} … \operatorname{xor} a_{r - 1} \operatorname{xor} a_r$。考虑前缀和，设 $a$ 的异或前缀和数组为 $b$，则 $l, r$ 的奇偶性就为 $b_{l-1} \operatorname{xor} b_{r}$。</p><p>考虑如何求出 $a$。显然，求出 $b$ 之后就可以一一求出 $a$。</p><p>题目中相当于给出了每组 $i, j$ 之间的代价。但此时由于是前缀和数组，连边的结点不再是 $i, j$，而是 $i - 1, j$。之后不难发现求出 $b$ 需要整个图连通，对建出的图求 MST 即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, dis;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; edge[<span class="number">4000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> find[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionFind</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find[x] == x ? x : find[x] = unionFind(find[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        find[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            read(c);</span><br><span class="line">            edge[++m].u = i - <span class="number">1</span>;</span><br><span class="line">            edge[m].v = j;</span><br><span class="line">            edge[m].dis = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(edge + <span class="number">1</span>, edge + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = unionFind(edge[i].u), v = unionFind(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            find[u] = v;</span><br><span class="line">            ans += edge[i].dis;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 最小生成树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组学习笔记（二）</title>
      <link href="/2020/04/04/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/04/04/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>树状数组一些不那么裸的操作。</p><a id="more"></a><h3 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h3><p>我们已经知道了单点修改怎么做，但是怎么区间修改呢？</p><p>考虑差分。</p><p>现在已知差分数组 <code>diff[i] = a[i] - a[i - 1]</code>，求每个点的值其实就是求这个点在差分数组中的前缀和。</p><p>所以此时每个结点存的不是原数组，而是差分数组，更新的时候按照差分的思路更新即可。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t[<span class="number">500010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, diff, x, opt, y, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt;= n) &#123;</span><br><span class="line">        t[pos] += d;</span><br><span class="line">        pos += lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos) &#123;</span><br><span class="line">        s += t[pos];</span><br><span class="line">        pos -= lowbit(pos);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        read(x);</span><br><span class="line">        update(i, x - diff);</span><br><span class="line">        diff = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        read(opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            read(x), read(y), read(k);</span><br><span class="line">            update(x, k), update(y + <span class="number">1</span>, -k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            read(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码只能单点查询，接下来讨论区间查询的情况：</p><p>已知原数组 $a$，差分数组 $b$，且 $a_i = \sum_{j=1}^{i}b_j$。</p><p>区间查询就意味着用到 $a$ 的前缀和相减，所以还要对 $a$ 建树。假设现在求 $p$ 的前缀和。</p><p>$$<br>\begin{aligned}<br>    &amp;\sum_{i=1}^{p}a_i \<br>    = &amp;\sum_{i=1}^{p}\sum_{j=1}^{i}b_j \<br>    = &amp;\sum_{i=1}^{p}b_i(p - i + 1) \<br>    = &amp;\sum_{i=1}^{p}b_i(p+1) - \sum_{i=1}^{p}ib_i<br>\end{aligned}<br>$$</p><p>即我们只需要维护 $\sum b_i$ 和 $\sum ib_i$。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL t[<span class="number">1000010</span>], g[<span class="number">1000010</span>];</span><br><span class="line">LL n, q, x, l, r, opt, last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">lowbit</span><span class="params">(LL x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(LL pos, LL d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = pos;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt;= n) &#123;</span><br><span class="line">        t[pos] += d, g[pos] += d * tmp;</span><br><span class="line">        pos += lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL pos)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>, tmp = pos;</span><br><span class="line">    <span class="keyword">while</span> (pos) &#123;</span><br><span class="line">        s += (tmp + <span class="number">1</span>) * t[pos] - g[pos];</span><br><span class="line">        pos -= lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        read(x);</span><br><span class="line">        update(i, x - last);</span><br><span class="line">        last = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        read(opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            read(l), read(r), read(x);</span><br><span class="line">            update(l, x), update(r + <span class="number">1</span>, -x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            read(l), read(r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, query(r) - query(l - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求逆序对"><a href="#求逆序对" class="headerlink" title="求逆序对"></a>求逆序对</h3><p>逆序对也是树状数组的一个应用。</p><p>考虑逆序对的定义：对于两个数 $i, r$，如果 $a_i &gt; a_r$ 且 $i &lt; r$ 则称这个东西为逆序对。</p><p>可以用总数减去非严格顺序对的个数得到这个答案。</p><p>现在结点表示的不是 $a_i$，而是 $i$ 出现过几次。</p><p>举个例子，第 $i$ 个数为 $a_i$，修改并不是 <code>update(i, a[i])</code>，而是 <code>update(a[i], 1)</code>。</p><p>每次求 $a_i$ 的前缀和，就得到了当前非严格顺序对的个数。</p><p>一般还需要离散化。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, id;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.val == b.val) <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">        <span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; b[<span class="number">500010</span>];</span><br><span class="line"></span><br><span class="line">LL a[<span class="number">500010</span>], t[<span class="number">500010</span>];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt;= n) &#123;</span><br><span class="line">        t[pos] += d;</span><br><span class="line">        pos += lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos) &#123;</span><br><span class="line">        s += t[pos];</span><br><span class="line">        pos -= lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        read(b[i].val);</span><br><span class="line">        b[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    a[b[i].id] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        update(a[i], <span class="number">1</span>);</span><br><span class="line">        ans += i - query(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建树优化"><a href="#建树优化" class="headerlink" title="建树优化"></a>建树优化</h3><p>设当前结点为 $x$，子结点为 $s$，不难发现 $x = \sum t_s$。</p><p>所以在建树时直接对自己和自己的父亲进行操作即可。</p><p>能将建树的时间复杂度优化到 $O(n)$。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    read(x);</span><br><span class="line">    t[i] += x;</span><br><span class="line">    <span class="keyword">if</span> (i + lowbit(i) &lt;= n) t[i + lowbit(i)] += x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://loj.ac/problem/130" target="_blank" rel="noopener">LOJ #130. 树状数组 1 ：单点修改，区间查询</a></p><p><a href="https://loj.ac/problem/131" target="_blank" rel="noopener">LOJ #131. 树状数组 2 ：区间修改，单点查询</a></p><p><a href="https://loj.ac/problem/132" target="_blank" rel="noopener">LOJ #132. 树状数组 3 ：区间修改，区间查询</a></p><p><a href="https://www.luogu.com.cn/problem/P3374" target="_blank" rel="noopener">洛谷 P3374 【模板】树状数组 1</a></p><p><a href="https://www.luogu.com.cn/problem/P3368" target="_blank" rel="noopener">洛谷 P3368 【模板】树状数组 2</a></p><p>一维树状数组的几道模板题。</p><p><a href="https://www.luogu.com.cn/problem/P1908" target="_blank" rel="noopener">洛谷 P1908 逆序对</a></p><p>可以用来写逆序对的题。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 树状数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初中物理叠加或切割情景中的压强</title>
      <link href="/2020/04/02/%E5%88%9D%E4%B8%AD%E7%89%A9%E7%90%86%E5%8F%A0%E5%8A%A0%E6%88%96%E5%88%87%E5%89%B2%E6%83%85%E6%99%AF%E4%B8%AD%E7%9A%84%E5%8E%8B%E5%BC%BA/"/>
      <url>/2020/04/02/%E5%88%9D%E4%B8%AD%E7%89%A9%E7%90%86%E5%8F%A0%E5%8A%A0%E6%88%96%E5%88%87%E5%89%B2%E6%83%85%E6%99%AF%E4%B8%AD%E7%9A%84%E5%8E%8B%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<p>发现自己的物理是拉分项……</p><a id="more"></a><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目 1"></a>题目 1</h3><p>[2019 河南开封一模] 如图所示，两个质量相等的实心均匀正方体 $A, B$ 静止放置在水平地面上，$A$ 的边长小于 $B$ 的边长，下列说法正确的是（    ）</p><p><img src="https://i.loli.net/2020/04/02/JhEG645mvVC3x7o.png"></p><ul><li>A. $A, B$ 对水平地面的压强 $p_A &lt; p_B$</li><li>B. 若将 $A, B$ 均沿竖直方向截去一半，则剩余部分对水平地面的压强 $p_A &lt; p_B$</li><li>C. 若将 $A, B$ 均沿水平方向截去一半，则剩余部分对水平地面的压强 $p_A &lt; p_B$</li><li>D. 若将 $A, B$ 均沿图中所示虚线截去上面的一半，则则剩余部分对水平地面的压强 $p_A &gt; p_B$</li></ul><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>D。</p><p>由题得 $m_A = m_B, S_A &lt; S_B$，则 $p_A &gt; p_B$。</p><p>沿竖直方向截去一半，压强不变。沿水平方向截去一半或沿虚线截去一半，压强均变为原来的一半。</p><p>这题比较简单……</p><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目 2"></a>题目 2</h3><p>[2018 上海崇明区二模] 如图所示，形状，体积相同的甲、乙长方体以不同方式放在水平面上，它们对水平面的压强相等，若在两物体上沿竖直方向切去相同的体积后放在各自剩余部分上方，此时它们对水平面的压强 $p_A$ 和 $p_B$ 的关系为（ ）</p><p>由于写 $\LaTeX$ 的时候中文实在是太难看了所以就改成 $A$ 和 $B$ 了。</p><p><img src="https://i.loli.net/2020/04/02/cZbgnPXy4kEu3mz.png"></p><ul><li>A. $p_A$ 可能大于 $p_B$</li><li>B. $p_A$ 一定等于 $p_B$</li><li>C. $p_A$ 可能小于 $p_B$</li><li>D. $p_A$ 一定小于 $p_B$</li></ul><h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><p>B。</p><p>先考虑极限法，当 $\Delta V = V_A$ 时，长方体没有发生任何变化，压强相等。 </p><p>但是答案里有 “可能” 这样的词语，所以还是要分析一下的……</p><p>$$\begin{aligned}<br>    \dfrac{G_A}{S_A - \Delta S_A} &amp;: \dfrac{G_B}{S_B - \Delta S_B} \<br>    \dfrac{G_A}{\dfrac{V_A - \Delta V_A}{h_A}} &amp;: \dfrac{G_B}{\dfrac{V_B - \Delta V_B}{h_B}} \<br>    \dfrac{G_Ah_A}{V_A - \Delta V_A} &amp;: \dfrac{G_Bh_B}{V_B - \Delta V_B}<br>\end{aligned}<br>$$</p><p>不难发现 $V_A - \Delta V_A$ 和 $V_B - \Delta V_B$ 其实是相等的。</p><p>则原式化为</p><p>$$\begin{aligned}<br>    \dfrac{G_Ah_A}{G_Bh_B} = \dfrac{\rho_AgV_Ah_A}{\rho_BgV_Bh_B}<br>\end{aligned}<br>$$</p><p>由题得到 $V_A = V_B$ 且 $p_A = p_B$。</p><p>则 $\rho_Agh_A = \rho_Bgh_B$，约分可得原式结果为 $1$，$p_A = p_B$。</p><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目 3"></a>题目 3</h3><p>[2019 上海浦东新区月考] 如图所示，甲、乙两个均匀实心正方体放在水平地面上时对水平地面的压强相等，若分别将两正方体沿竖直方向截去相同的质量并分别放在各自剩余部分的上方，此时它们对地面的压强 $p_A, p_B$ 的关系是（ ）</p><p><img src="https://i.loli.net/2020/04/04/DaHK1AFNBJIzEGo.png"></p><ul><li>A. $p_A &gt; p_B$</li><li>B. $p_A = p_B$</li><li>C. $p_A &lt; p_B$</li><li>D. 无法判断</li></ul><h3 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h3><p>A。</p><p>由题得 $S_A &lt; S_B, p_A = p_B$，则 $m_A &lt; m_B$。</p><p>设切去的质量 $\Delta m$ 无限接近 $m_A$，则 $p_A$ 相当于无限大，得出答案为 A。</p><p>或者换一种方法。</p><p>不难发现切割后没有被放在自己上面的那部分压强其实是不变的，那么只需要表示出切割部分的压强变化。</p><p>则 $\Delta p_A = \dfrac{\Delta m}{S_A - \dfrac{\Delta m}{h_A\rho_A}} = \dfrac{\Delta m}{\dfrac{m_A - \Delta m}{h_A\rho_A}} = \dfrac{\Delta mh_A\rho_A}{m_A - \Delta m}$。</p><p>同理得 $\Delta p_B = \dfrac{\Delta mh_B\rho_B}{m_B - \Delta m}$。</p><p>注意到 $h_A\rho_A = h_B\rho_B$，两式分子相等，而 $m_A &lt; m_B$，则 $\Delta p_A &gt; \Delta p_B$。</p><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目 4"></a>题目 4</h3><p>甲、乙两个实心正方体，分别由密度 $\rho_1, \rho_2$ 的物质组成，将它们放在水平地面上，甲对地面的压强为 $p_1$，乙对地面的压强为 $p_2$。把甲放在乙的上面时乙对地面的压强与把乙放在甲上面时甲对地面的压强之比为？</p><p>总算不用画图了……</p><h3 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h3><p>发现两次压力相同，所以只需要比较 $S_1$ 和 $S_2$ 即可。</p><p>由题得到物体均为正方体，则 $S = h^2$。</p><p>所以 $S_1 = h_1^2 = (\dfrac{p_1}{\rho_1g})^2 = \dfrac{p_1^2}{\rho_1^2g^2}$。</p><p>同理得 $S_2 = \dfrac{p_2^2}{\rho_2^2g^2}$。</p><p>$S_2 : S_1 = \dfrac{p_2^2}{\rho_2^2g^2} : \dfrac{p_1^2}{\rho_1^2g^2} = \dfrac{p_2^2\rho_1^2}{p_1^2\rho_2^2}$。</p><p>别忘了求的是压强之比，还要再交换一次分子分母位置，最终答案为 $\dfrac{p_1^2\rho_2^2}{p_2^2\rho_1^2}$。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这种题大概就是列式子算吧……</p><p>如果哪一步卡着了，想一想题目中的条件有没有都用上，考虑一下是不是式子运算的时候展开的不够彻底，实在算不出来极限法也是一种选择。</p>]]></content>
      
      
      <categories>
          
          <category> 物理 </category>
          
          <category> 力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文化课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于一类简单的初中物理题</title>
      <link href="/2020/03/27/%E5%85%B3%E4%BA%8E%E4%B8%80%E7%B1%BB%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%9D%E4%B8%AD%E7%89%A9%E7%90%86%E9%A2%98/"/>
      <url>/2020/03/27/%E5%85%B3%E4%BA%8E%E4%B8%80%E7%B1%BB%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%9D%E4%B8%AD%E7%89%A9%E7%90%86%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>水一篇文章。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>将比热容为 $c$ 的 $A$ 液体与比热容为 $4c$ 的 $B$ 液体按一定质量比混合，测得混合液的比热容为 $3c$，则混合液中 $A, B$ 两种液体的质量比为？</p><h3 id="正常做法"><a href="#正常做法" class="headerlink" title="正常做法"></a>正常做法</h3><p>设质量分别为 $m_{A}, m_B$，混合后的液体为 $C$。</p><p>由 $Q_A + Q_B = Q_C$ 得 $cm_A \Delta t + 4cm_B \Delta t = 3c(m_A + m_B) \Delta t$。</p><p>化简得 $m_B = 2m_A$。</p><p>质量比为 $1 : 2$。</p><h3 id="魔术"><a href="#魔术" class="headerlink" title="魔术"></a>魔术</h3><p>可能是我太菜了……</p><p>同班某位同学给了一种奇怪的做法，老师也没讲为什么正确，但是的确是对的。</p><p>十字交叉，得到 $4 - 3 = 1, 3 - 1 = 2$，答案为 $1 : 2$。</p><p>后来自己仔细想了一下，这个其实就是简化了化简的过程，正常做法中两边在约去 $c\Delta t$ 后为 $m_A + 4m_B = 3m_A + 3m_B$，移项可得到 $4m_B - 3m_B = 3m_A - m_A$，也就是十字交叉的方法了。</p><p>那么在什么情况下可以使用这种方法呢？</p><p>大胆猜想当满足 $a = \frac{b}{c}$ 且 $a = \frac{\Delta b}{\Delta c}$ 时可以用。</p><p>密度相关应该是可以用的，看今年中考会不会出吧。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉自己好水啊，这都能写篇文章。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>草，写这篇文章的第二天的自治区摸底考试真就考了密度的题。</p><p>题目：</p><p>甲物质的密度为 $3 \operatorname{g} / \operatorname{cm}^3$，乙物质的密度为 $8 \operatorname{g} / \operatorname{cm}^3$，各取一定质量的甲、乙混合后密度为 $5 \operatorname{g} / \operatorname{cm}^3$。假设混合前后总体积保持不变，则所取甲、乙两种物质的体积之比为？</p><p>十字交叉可得为 $3 : 2$……</p><h3 id="后后记"><a href="#后后记" class="headerlink" title="后后记"></a>后后记</h3><p>老师上课专门说了这个东西，说这个方法比出来的不知道是什么东西，所以不让我们用……</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>挺迷惑的，这个东西好奇怪。密度比出来是体积比，体积比出来就是质量比了，搞不懂。</p>]]></content>
      
      
      <categories>
          
          <category> 物理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MSSCTF2019-Final] PPC 题解</title>
      <link href="/2020/03/13/MSSCTF-Final-Stellaris/"/>
      <url>/2020/03/13/MSSCTF-Final-Stellaris/</url>
      
        <content type="html"><![CDATA[<p>群里面说能评测了所以写了个简单的题解。</p><a id="more"></a><h3 id="奇数"><a href="#奇数" class="headerlink" title="奇数"></a>奇数</h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定长度为 $n$ 的序列 $s$，保证 $s_i$ 为数字。</p><p>求出 $s$ 中奇数子序列的个数，结果对 $998244353$ 取模。</p><p>$1 \le n \le 10^5$。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>签到题，估计人人过了。</p><p>考虑以 $i$ 结尾的子序列个数，显然为 $2^{i - 1}$ 个。</p><p>分类讨论更新答案。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">LL f[<span class="number">100010</span>];</span><br><span class="line">LL ans, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; s[i]; ++i)  f[i] = f[i - <span class="number">1</span>] * <span class="number">2</span>, f[i] %= mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; ++i)  ans += s[i] % <span class="number">2</span> == <span class="number">1</span> ? f[i] : <span class="number">0</span>, ans %= mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动石子"><a href="#移动石子" class="headerlink" title="移动石子"></a>移动石子</h3><h4 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定长度为 $n$ 的序列 $a$，每次操作可以选择 $i, j$ 并使 $a_i$ 减一，$a_j$ 加一，或者选择 $i$ 使 $a_i$ 减一。计算出使所有 $a_i$ 相同需要的最少操作次数。</p><p>$1 \le n \le 10^7, 1 \le a_i \le 10^9$。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>考虑贪心，将大的数多余的部分加到小的数的上。</p><p>如果最后还有剩余就删掉。</p><p>显然最优时最后序列中的数为原序列的平均数。</p><p>所以先对序列排序，然后从大往小一个个删，这样保证了不会不够用并且一定最优。计算时会自动加上那些单独删掉的数。</p><p>注意开 long long。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL a[<span class="number">10000010</span>];</span><br><span class="line">LL n, sum, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    read(a[i]), sum += a[i];    sum /= n;</span><br><span class="line">    <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)    ans += a[i] &gt; sum ? a[i] - sum : <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="星门"><a href="#星门" class="headerlink" title="星门"></a>星门</h3><h4 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h4><p>给出一个 $n$ 个点和 $m$ 条边的无向图，所有边权为 $1$，给定起点和终点 $s, t$，你可以任选两个点连接一条边权为 $1$ 的边，统计有多少种方法使得新的最短路小于原最短路。题目保证给出的图无自环。</p><p>$2 \le n \le 2000, 2 \le m \le 5 \cdot 10^5$。</p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>我记得全场只有两个人切掉？</p><p>图论入门题。</p><p>分别以 $s$ 和 $t$ 为起点求出最短路，然后枚举点，更新答案。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, dis;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.dis &gt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> dis1[<span class="number">2010</span>], dis2[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, s, t, max, ans;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> *dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::priority_queue&lt;Node&gt; que;</span><br><span class="line">    que.push((Node)&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Node top = que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[top.pos])   <span class="keyword">continue</span>;</span><br><span class="line">        vis[top.pos] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[top.pos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[i] &gt; dis[top.pos] + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i] = dis[top.pos] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (!vis[i])    que.push((Node)&#123;i, dis[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(m), read(s), read(t);</span><br><span class="line">    <span class="built_in">memset</span>(dis1, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span>(dis1));</span><br><span class="line">    <span class="built_in">memset</span>(dis2, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span>(dis2));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        edge[u].push_back(v), edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(s, dis1);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    dijkstra(t, dis2);</span><br><span class="line">    max = dis1[t];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (dis1[i] + dis2[j] + <span class="number">1</span> &lt; max)    ++ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="魔法使帕秋莉"><a href="#魔法使帕秋莉" class="headerlink" title="魔法使帕秋莉"></a>魔法使帕秋莉</h3><h4 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h4><p>给出物品数 $n$ 和背包容量 $m$，求出选择某些物品使得 $\prod a_i \le m$ 的方案数。答案对 $10^9 + 7$ 取模。</p><p>$1 \le n \le 3000, 1 \le m \le 10^8, 1 \le a_i \le m$。</p><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>全场没人切掉的神仙题。</p><p>考虑 dp。</p><p>利用 01 背包，状态转移方程：$f(i, j) = f(i - 1, j) + f(i - 1, \frac{j}{a_i})(j \bmod a_i = 0)$。</p><p>这样复杂度是 $O(nm)$ 的，会超时。</p><p>发现乘积的增长速度过快，我们可以压缩一下状态。</p><p>显然，$\frac{n}{x}$ 不同的结果最多有 $\sqrt{n} + 1$ 个，且 ${\frac{\frac{a}{b}}{c}} = \frac{a}{bc}$。以上运算均取整，实在太难打不打了。</p><p>所以可以将复杂度优化到 $O(n\sqrt{m})$。</p><p>就可以通过啦。</p><p>还涉及到取模问题……感觉是道比较神仙的题。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>放一下官方的 std。</p><p><del>其实是我懒得写了</del>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *　　　　　　  　　┏┓　　 　┏┓</span></span><br><span class="line"><span class="comment"> * 　　　　　  　　┏┛┗━━━━━━━┛┗━━━┓</span></span><br><span class="line"><span class="comment"> * 　　　　　  　　┃　　　　　　　┃ 　</span></span><br><span class="line"><span class="comment"> * 　　　　　  　　┃　　　━　　 　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　  　　┃　＞　　　＜　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　  　　┃　　　　　　　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　  　　┃...　⌒　... 　┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　  　┃              ┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　  　┗━┓          ┏━┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃          ┃　Code is far away from bug with the animal protecting　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃          ┃   神兽保佑,代码无bug</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃          ┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃          ┃  　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃          ┃</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃          ┃　　　　　　　　　　　</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃          ┗━━━┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃              ┣┓</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┃              ┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　┗┓┓┏━━━━━━━━┳┓┏┛</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　　┃┫┫       ┃┫┫</span></span><br><span class="line"><span class="comment"> * 　　　　　　　　　　┗┻┛       ┗┻┛</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dec(i,l,r) for(int i=l;i&gt;=r;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> link(x) for(edge *j=h[x];j;j=j-&gt;next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> succ(x) (1&lt;&lt;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (x+y&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NM 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nm 400005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(ll&amp;x)</span></span>&#123;x+=x&gt;&gt;<span class="number">63</span>&amp;inf;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,<span class="keyword">_t</span>,a[NM],w[NM];</span><br><span class="line">ll d[NM],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;=m/<span class="number">2</span>?m-x:<span class="keyword">_t</span>/x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    m=<span class="built_in">sqrt</span>(<span class="keyword">_t</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,m)w[i]=<span class="keyword">_t</span>/i;</span><br><span class="line">    <span class="keyword">while</span>(w[m])w[m+<span class="number">1</span>]=w[m]<span class="number">-1</span>,m++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    assert(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;<span class="keyword">_t</span>)==<span class="number">2</span>);</span><br><span class="line">    inc(i,<span class="number">1</span>,n)assert(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i)==<span class="number">1</span>);</span><br><span class="line">    init();</span><br><span class="line">    d[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">dec(j,m,<span class="number">1</span>)reduce(d[id(w[j]/a[i])]+=d[j]-inf);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">-1</span>;</span><br><span class="line">    inc(i,<span class="number">1</span>,m<span class="number">-1</span>)reduce(ans+=d[i]-inf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://mssctf.xidian.edu.cn/" target="_blank" rel="noopener">https://mssctf.xidian.edu.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> PPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 OI</title>
      <link href="/2020/03/11/%E5%85%B3%E4%BA%8E-OI/"/>
      <url>/2020/03/11/%E5%85%B3%E4%BA%8E-OI/</url>
      
        <content type="html"><![CDATA[<p>没有 AFO。</p><a id="more"></a><p><img src="https://i.loli.net/2020/03/12/46BqCaYxMNHyL2I.png" alt="IMG_1162.PNG"></p><p><img src="https://i.loli.net/2020/03/12/zbE3FhBNte5jVMY.png" alt="IMG_1163.PNG"></p><p>我会一直走下去的。</p><p>我希望能成为永远的 OIer。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『sola』 观后感</title>
      <link href="/2020/03/09/%E3%80%8Esola%E3%80%8F-%E8%A7%82%E5%90%8E%E6%84%9F/"/>
      <url>/2020/03/09/%E3%80%8Esola%E3%80%8F-%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p><meting-js    id="004PBlEk0Ibd8q"    server="tencent"    type="song"><br></meting-js></p><a id="more"></a><p>感觉是一部很冷的番吧…</p><p>集数不多，正片只有 13 集，但是却讲了一个既带有奇幻色彩又具有纯爱剧情的故事。</p><p>看到最后女主之间的争论，个人感觉无非是针对是否需要维持真相的争论。</p><p>苍乃和依人原本都去世了，可是在茉莉的操作下，苍乃变成了夜祸。</p><p>苍乃因为对弟弟太过思恋，利用夜祸的力量，做了跟原本弟弟一样的纸片人（真 纸片人）。</p><p>也就是说，这对姐弟原本应该死去，却因为夜祸的力量以另一种方式存在于世界上。</p><p>到最后，茉莉想要一种力量把苍乃恢复成人类，但是这样依人就会消失。</p><p>但其实茉莉也可以把自己恢复成人类。</p><p>苍乃认为，自己已经创造出了依人，可以两人一起这样生活下去，跟是否是人类没有关系。</p><p>而茉莉和依人则认为应该让一切恢复真相。</p><p>而我认为苍乃是正确的，如果最后真相是这样的，那是否是真相又有什么关系呢？就像火影中的无限月读那样，如果能无限制的活在梦境中，那和在真实世界又有什么区别呢？所以我一直认为对于这类事情，真相是毫无意义的。</p><p>如果茉莉不出现，那么苍乃或许就可以和弟弟永远一起生活，依人也不会发现自己是苍乃创作出来这一点事实，大家都过的是美好的生活。</p><p>可是茉莉告诉了依人，你就是个纸片人，你原本早死掉了。</p><p>上面说的都是我个人情感上的话语，但是仔细思考一下，从剧中可以很明显看出茉莉对于依人的感情，是发自内心真挚的喜欢。</p><p>最后战斗的时候，穿插了许多三人在过去一起生活的日子，或许茉莉认为那些日子才是真实的，才是她脑海中真正的依人和苍乃的样子吧。</p><p>所以茉莉做错了吗？她做错了。她复活了原本应该死去的苍乃，才造成了后面这些事情的发生。</p><p>但也是她，又把一切恢复了原样。</p><p>在这个过程中，她才是最痛苦的。忍受了几百年里孤身一人的痛苦，原本可以让真相就此隐去，结果选择了对她来说结果最差的一种道路。</p><p>剧中的配角的故事也并不失色，大叔和萝莉在剧中出现的场景经常让人忍俊不禁，但是背后的故事也会让人感动。纵使萝莉变成了夜祸，大叔也还一直坚守着对她的感情直到最后。</p><p>配角还有一个路人妹子真名，从剧中也能看出喜欢着依人，但是这里又玩了一个跟 Clannad 相似的套路。</p><p>随着苍乃力量的逐渐消失，依人的存在逐渐被抹去。甚至到最后，原本的房子都只剩下了几张纸片。</p><p>这个套路真的是用一次让人落泪一次。</p><p>而真名并不知道这一点，以至于她隐隐约约感受到这些事情的时候，向其他人不经意提起的时候，其他人都忘记了依人的存在。在感到事情不对劲时，她赶到依人最常出现的地方，还好，依人还在那里，看着被夕阳染成火红色的天空。</p><p>可是一切都已经无法挽回了，依人对他撒了谎，称自己不会这样消失。</p><p>然而当真名醒来时，只剩下了她一人。而她自己，也忘记了依人的存在。</p><p>那天晚上也就是故事的结局。</p><p>这一切发生之后，除了苍乃，其他人的生活都恢复了原样，依人就像从未出现过一样，而苍乃则是成为了正常的人类，也正因为此，苍乃原本的存在也消失殆尽。</p><p>若干时间后，当苍乃再次看到那些她曾经的朋友时，她心中也会感到唏嘘吧。</p><p>连接这一切的，只有永远的天空（そら，sola，其实应该是 sora）。</p><p>回到最开始，天空这个意象一直穿插在全剧中，究竟意味着什么呢？</p><p>天空，永远存在于世上，不会消逝，注视着地上的人们，和不是人类的人们。</p><p>可能代表着的，就是人与人之间的爱恋和不会被时间磨灭的羁绊吧。</p><p>看完了这部番其实还是挺懵的，不过在 07 年那个神作繁出的时代都能获得不错的评价，也是一个证明吧…</p><p>另外这作画实在是有点崩…</p><p>最后放一下 ED 吧：</p><p><meting-js    id="003xjaXP0W4i6H"    server="tencent"    type="song"><br></meting-js></p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[SPOJ1437] PT07Z - Longest path in a tree</title>
      <link href="/2020/03/05/SPOJ-1437-PT07Z-Longest-path-in-a-tree/"/>
      <url>/2020/03/05/SPOJ-1437-PT07Z-Longest-path-in-a-tree/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/SP1437" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个 $n$ 个点的树，求出树上任意两点间的最长距离。$1 \le n \le 10^4$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>树的直径的模板题。</p><p>首先考虑较简单的情况，当树是一条链时，直接求出离根最远的点即可。</p><p>拓展到树不是一条链的情况，利用贪心的想法，求出离根最远的点和离根第二远的点，设 $f(i)$ 为离 $i$ 最远的点的距离，$g(i)$ 为离 $i$ 第二远的点的距离，则最终答案为 $\max(f(i) + g(i))$。特别的，如果树是一条链，则$g(i) = 0$，因为并不会有第二远的点。</p><p>时间复杂度 $O(n)$。</p><p>另外还有一种需要两次 dfs 的做法：第一次 dfs 求出离树根最远的点，第二次 dfs 求出离第一次 dfs 求出的点最远的点。这两点间的路径即为树的直径。<del>这种做法好像简单一些</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> dis1[<span class="number">10010</span>], dis2[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != pa)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(i, x);</span><br><span class="line">            <span class="keyword">int</span> dis = dis1[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dis &gt; dis1[x])  dis2[x] = dis1[x], dis1[x] = dis;</span><br><span class="line">            <span class="keyword">else</span>    <span class="keyword">if</span> (dis &gt; dis2[x])  dis2[x] = dis;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">std</span>::max(ans, dis1[x] + dis2[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        edge[u].push_back(v), edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 树上问题 </category>
          
          <category> 树的直径 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[POI2008] STA-Station</title>
      <link href="/2020/03/05/POI2008-STA-Station/"/>
      <url>/2020/03/05/POI2008-STA-Station/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P3478" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个 $n$ 个点的树，找到树上一点使得当这一点为根时所有点的深度之和最大，$1 \le n \le 10^6$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>设 $f(i)$ 表示当根为 $i$ 时所有点的深度之和。</p><p>首先预处理出每个点的子树大小和 $f(1)$。</p><p>思考对于树上任意两个相邻的结点 $u, v$，当树根从 $u$ 转移到 $v$ 时的影响。</p><p>显然，$v$ 的子树内所有点的深度 $-1$，其他所有点的深度 $+1$。</p><p>也就是说，$f(v) = f(u) - \operatorname{siz}(v) + n - \operatorname{siz}(v) = f(u) - 2\operatorname{siz}(v) + n$。</p><p>时间复杂度 $O(n)$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>可能是我自带大常数？？这份代码并不能在洛谷上拿到满分。有时间把建图方式改成链式前向星吧…</p><p>然后注意输出的是点的编号不是深度之和……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max;</span><br><span class="line"><span class="keyword">int</span> siz[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pa, <span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>, f[<span class="number">1</span>] += dep;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[x])</span><br><span class="line">        <span class="keyword">if</span> (i != pa)</span><br><span class="line">            dfs(i, x, dep + <span class="number">1</span>), siz[x] += siz[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : edge[x])</span><br><span class="line">        <span class="keyword">if</span> (i != pa)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = f[x] + siz[<span class="number">1</span>] - siz[i] * <span class="number">2</span>, dfs1(i, x);</span><br><span class="line">            <span class="keyword">if</span> (f[i] &gt; max)    max = f[i], ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        edge[u].push_back(v), edge[v].push_back(u);</span><br><span class="line">    &#125;    </span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 树形 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[洛谷 P3353] 在你窗外闪耀的星星</title>
      <link href="/2020/03/03/%E6%B4%9B%E8%B0%B7-P3353-%E5%9C%A8%E4%BD%A0%E7%AA%97%E5%A4%96%E9%97%AA%E8%80%80%E7%9A%84%E6%98%9F%E6%98%9F/"/>
      <url>/2020/03/03/%E6%B4%9B%E8%B0%B7-P3353-%E5%9C%A8%E4%BD%A0%E7%AA%97%E5%A4%96%E9%97%AA%E8%80%80%E7%9A%84%E6%98%9F%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=22712173&auto=0&height=66"></iframe><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P3353" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：求一个序列中给定区间长度的最大区间和。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题应该是 POJ 2482 的简化版，原题是二维的。</p><p>前缀和裸题，枚举端点进行统计。</p><p>主要是这个题面比较好。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>], f[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n, w, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(w);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, b; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x), read(b);</span><br><span class="line">        a[x] += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000</span>; ++i)   f[i] = f[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt;= <span class="number">100000</span>; ++i)   ans = <span class="built_in">std</span>::max(ans, f[i] - f[i - w]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>Fleeting time does not blur my memory of you. Can it really be 4 years since I first saw you? I still remember, vividly, on the beautiful Zhuhai Campus, 4 years ago, from the moment I saw you smile, as you were walking out of the classroom and turned your head back, with the soft sunset glow shining on your rosy cheek, I knew, I knew that I was already drunk on you. Then, after several months’ observation and prying, your grace and your wisdom, your attitude to life and your aspiration for future were all strongly impressed on my memory. You were the glamorous and sunny girl whom I always dream of to share the rest of my life with. Alas, actually you were far beyond my wildest dreams and I had no idea about how to bridge that gulf between you and me. So I schemed nothing but to wait, to wait for an appropriate opportunity. Till now — the arrival of graduation, I realize I am such an idiot that one should create the opportunity and seize it instead of just waiting.</p><p>These days, having parted with friends, roommates and classmates one after another, I still cannot believe the fact that after waving hands, these familiar faces will soon vanish from our life and become no more than a memory. I will move out from school tomorrow. And you are planning to fly far far away, to pursue your future and fulfill your dreams. Perhaps we will not meet each other any more if without fate and luck. So tonight, I was wandering around your dormitory building hoping to meet you there by chance. But contradictorily, your appearance must quicken my heartbeat and my clumsy tongue might be not able to belch out a word. I cannot remember how many times I have passed your dormitory building both in Zhuhai and Guangzhou, and each time aspired to see you appear in the balcony or your silhouette that cast on the window. I cannot remember how many times this idea comes to my mind: call her out to have dinner or at least a conversation. But each time, thinking of your excellence and my commonness, the predominance of timidity over courage drove me leave silently.</p><p>Graduation, means the end of life in university, the end of these glorious, romantic years. Your lovely smile which is my original incentive to work hard and this unrequited love will be both sealed as a memory in the deep of my heart and my mind. Graduation, also means a start of new life, a footprint on the way to bright prospect. I truly hope you will be happy everyday abroad and everything goes well. Meanwhile, I will try to get out from puerility and become more sophisticated. To pursue my own love and happiness here in reality will be my ideal I never desert.</p><p>Farewell, my princess!</p><p>If someday, somewhere, we have a chance to gather, even as gray-haired man and woman, at that time, I hope we can be good friends to share this memory proudly to relight the youthful and joyful emotions. If this chance never comes, I wish I were the stars in the sky and twinkling in your window, to bless you far away, as friends, to accompany you every night, sharing the sweet dreams or going through the nightmares together.</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 前缀和 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AHOI2008] 紧急集合</title>
      <link href="/2020/02/28/AHOI2008-%E7%B4%A7%E6%80%A5%E9%9B%86%E5%90%88/"/>
      <url>/2020/02/28/AHOI2008-%E7%B4%A7%E6%80%A5%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P4281" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个 $n$ 个点的树，有 $m$ 次操作，每次给定三个点，求树上所有点中离三个点距离和最小的点和距离。$1 \le n, m \le 5 \times 10^5$。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先有一个画图之后显然的结论，所求的点一定是这三个点两两求 LCA 中的一种，并且一定有两个 LCA 是同一个点，我们要求的答案则是第三个点。</p><p>然后思考如何求出距离。采用差分的思想，我们已知每个点的深度，那么就可以加加减减求出这三个点离 LCA 的距离了。</p><p>附上一张图吧：</p><p><img src="https://i.loli.net/2020/02/28/MBl8JAWEmPnSgfV.png"></p><p>现在假设我们要求 $14, 6, 5$ 的 LCA，从图上可以显然看出 LCA 分别为 $2, 5, 2$。从这个例子就可以显然的看出我们应该选不同于另外两个点的那个点。</p><p>三个点的深度分别为 $5, 3, 3$，LCA 的深度分别为 $2, 3, 2$，最终答案为 $2 + 0 + 2 = 4$。</p><p>多找几组数据的规律，再结合人类智慧，可得出答案为 $\operatorname{dep}(a) + \operatorname{dep}(b) + \operatorname{dep}(c) - \operatorname{dep}(\operatorname{LCA}(a, b)) - \operatorname{dep}(\operatorname{LCA}(a, c)) - \operatorname{dep}(\operatorname{LCA}(b, c))$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next;</span><br><span class="line">&#125; edge[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">500010</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dep[<span class="number">500010</span>], head[<span class="number">500010</span>], lg[<span class="number">500010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt, p, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; edge[++cnt] = (Edge)&#123;v, head[u]&#125;; head[u] = cnt; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[now] = dep[pa] + <span class="number">1</span>;</span><br><span class="line">    f[now][<span class="number">0</span>] = pa;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lg[dep[now]]; ++i) f[now][i] = f[f[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">        <span class="keyword">if</span> (edge[i].to != pa)</span><br><span class="line">            dfs(edge[i].to, now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])    <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">    <span class="keyword">while</span> (dep[x] &gt; dep[y]) x = f[x][lg[dep[x] - dep[y]] - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lg[dep[x]] - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k)</span><br><span class="line">        <span class="keyword">if</span> (f[x][k] != f[y][k])</span><br><span class="line">            x = f[x][k], y = f[y][k];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)    lg[i] = lg[i - <span class="number">1</span>] + (<span class="number">1</span> &lt;&lt; lg[i - <span class="number">1</span>] == i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x), read(y);</span><br><span class="line">        addEdge(x, y), addEdge(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, z;</span><br><span class="line">        read(x), read(y), read(z);</span><br><span class="line">        <span class="keyword">int</span> p1 = lca(x, y), p2 = lca(x, z), p3 = lca(y, z);</span><br><span class="line">        <span class="keyword">if</span> (p1 == p2)   p = p3;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span> (p1 == p3)   p = p2;</span><br><span class="line">        <span class="keyword">else</span>    p = p1;</span><br><span class="line">        c = dep[x] + dep[y] + dep[z] - dep[p1] - dep[p2] - dep[p3];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, p, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>这题是不是恶评啊，怎么洛谷上是个紫题啊。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 树上问题 </category>
          
          <category> LCA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AHOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[POJ3299] Humidex</title>
      <link href="/2020/02/25/POJ-3299-Humidex/"/>
      <url>/2020/02/25/POJ-3299-Humidex/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="http://poj.org/problem?id=3299" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：看不懂</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>看不懂题，这描述的好像是什么温度相关的东西，对我这种物理学渣仿佛天书一般。</p><p>关键是题目中给的公式，然后按照这个公式套就行了。</p><p>C++ 中的 <code>math</code> 库里有 <code>exp</code> 函数和 <code>log</code> 函数，直接用就行。</p><p>还有这神奇的 POJ，同样的代码 G++ 是 WA，C++ 就是 AC…</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> t, d, h, e;</span><br><span class="line"><span class="keyword">char</span> q, w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; q &amp;&amp; q != <span class="string">'E'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = d = h = <span class="number">114514</span>;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="string">'T'</span>)   <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span> (q == <span class="string">'D'</span>)   <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">        <span class="keyword">if</span> (w == <span class="string">'T'</span>)   <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span> (w == <span class="string">'D'</span>)   <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">114514</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            e = <span class="number">6.11</span> * <span class="built_in">exp</span>(<span class="number">5417.7530</span> * ((<span class="number">1</span> / <span class="number">273.16</span>) - (<span class="number">1</span> / (d + <span class="number">273.16</span>))));</span><br><span class="line">            t = h - <span class="number">0.5555</span> * (e - <span class="number">10.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span> (h == <span class="number">114514</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            e = <span class="number">6.11</span> * <span class="built_in">exp</span>(<span class="number">5417.7530</span> * ((<span class="number">1</span> / <span class="number">273.16</span>) - (<span class="number">1</span> / (d + <span class="number">273.16</span>))));</span><br><span class="line">            h = t + <span class="number">0.5555</span> * (e - <span class="number">10.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            d = <span class="number">1</span> / ((<span class="number">1</span> / <span class="number">273.16</span>) - ((<span class="built_in">log</span>((((h - t) / <span class="number">0.5555</span>) + <span class="number">10.0</span>) / <span class="number">6.11</span>)) / <span class="number">5417.7530</span>)) - <span class="number">273.16</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"T %.1lf D %.1lf H %.1lf\n"</span>, t, d, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 水题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对不起</title>
      <link href="/2020/02/20/%E5%AF%B9%E4%B8%8D%E8%B5%B7/"/>
      <url>/2020/02/20/%E5%AF%B9%E4%B8%8D%E8%B5%B7/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码很长且我不经常使用，请不要在我没有告诉您密码的情况下再做没有意义的尝试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码：</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7a96ab17d242828e307b62151b373fe9c8b4bfce70774ad59d3a37678e3e8ef9">3c8651b128e732e795cfa74dc8fee44a843b81d366263c7e6901cd8fe39a05eb0c4a4c78a5a2aad5650183a94b68acc2476b060abb67d89cae033b945e619c0d841f2818de3aaff966c45da366a2e85c4c2be624cc947119d6b4d289807f77ea1175a95e1acdec9c90ebf0f655356d4d4653465abbc4d716675c8ead4c93224abc3cfaf9ca525811fe34d7f92d1ad4cf4912e96addb8b192e9ff9d39f5c37715b2ea66bac6d58b312370879ba5892acb200a822af19c43ca657a44803a72bad5519120693b4f03fd8e68d1e98471fd6b835189a534430c8b4d753071ad0c4dcf189b2ab40edda7c8edbc09b763dc760f6f6c2608faedd82ccfe0d9eb907cf2be1c97be11bbddb077e993770a80c81ea18345c65ef07e929fee7959f61ea646142669a7fdc3a7670f1218fc771df3e93984c9f60905ef8de9f495018a2be7b61ccfcaa02fea861ef00f221782b9e6f5f1ac53a6fb2162c5ecdeed64aa598c78d1b43eef44ec4f79f22dd36be413d2b610f65ffdc5c1ab1b6452673925170a80f870b07590ec431bf089943f69cf042bab02106ea63409f69bc2625262388d005442442807850f6d54d8b5cfe10679bed712a1187f85437b551b627e412dd2a0f3b556fd4bbf40b9620ed6ca438f68b6d707bb5a2683bc90e44f87f9d8cbbb7211c65c60f29da976a60542c5f98c80d3872f6b1c368ed5d54a710742b94398783e2366bdf17b0676f020573ef012cbb62598c5a83fca4353ae5f6339b99fe87f9f616c54c8675befe8045875007c6989881a97ecfd41537eaa490d39911baa6656af1f1c8cc62f8650cfb3f198b1d3b84c08cf774f4ee53d2586a408d292d682c26cb8b044fc391f2aa2ff5368179cff326428b12033b37ba52c638053c984449e621f33b6370ecf7b4fab2129effbc147e74e815270af097b9a4f9d71415b78363890cd4a049d101433f39e24f6f6732091eecc606dbeffa5103efb8fe2b572aed3b67d5af81b3a28ed70c5290deea1bdf5ac25facf53c05b4ac14e709dbc684c56428c5f70aa9501398dc98de1b462a71ea4436ecb006c7ebce9d7d39ff2003652f9ecd102e2406e60f9902de85dd1fdaa43a4933a8b04268c48dc278b5b37569a7ca99b6365e403f637b8b140efd5f17b9ec5b3fd2d7ef5d6aaed672f6380716692daca95cb18c4dc25edd87a5b8c27e009ebdac429baa82fbf52d0ebdeec8d17949898a187cf2bf12b7c2949549931471940601cd0646903243cd8fb5f1606c60691a7f02bb3c69308891197d66b55a303ece236382f3c49de8eabd9c87c0e81550bfed716c08405a352c829dc6f46437a9ed5db4109091a24d1a0aa962b92e08b75770c0ac1f6873d4c1692efcc26d5d0282898034b0413c113516e12a41cab97798912d968bc97531c8c060351687db6d691dc1984138dcf96da9a10c347040a798772974f7ba0bb6cfa1ec9bcab5871ef1485ff2e71a0f357a7c6a81a1b222f0ad5a2a29bc97ce83886be2a292f25ccbe98c6e858eab441e01c3715ed1a9a539ee70a20dfd04642d3594967b09546e5279fe3b2e650784f33dbe706963506dd17fbd6665af6f99bb75e5ac4b58887bf2b48cf5d9bea3e13d0782a9a27f0913f809b25080ab8c5053d1370e005d597f5402477586ff2cb321202c3a68b5ed01ac8ca7f788ee78cda60297933deafc7767291bfb8e9a06b9c21189bbff0875b4b99c789c1dae64cdba474722663b4bedea3110c9fd3354802fff01e4d3fdd704b6eb10493daf18d2496ae5aef97197f6a1098c930dc0e2dd8c5f32d9d7e827e801cd9f8064252b484d61266aff67728a203c45d6209dc55d57540dbb02928ae21e58d1a9b381d67c2f382417768e8d5423591ef5cc302f99b86e51f515b3c5cd32343208837251f35d2fb96dbbd47f1988c59e3bf956fed3f6e0ac071d360cd53602ea1cfe72ca5e3d0150926a8c9fd17dd0f87f91af1e0adb002f00ff128855f906ec23ce847bf640d8bd2fad368fb231b528c5b416cabd543ddde351ac48c74f3f3dbdc55743334e605623042c085628638670d751f2d674ab4fd5e906521caf1d1e2c1435d014e9349ace7eafb341e54f938237888093abb4f2863c0cbc8df5b5793214f7458b55e7afec389d4e73dadf461178d43d2a555a85cd3c99999697b80602a2b6c1bf8096aede655ddb3215fa38bf9aaf482da7478548f3e151dbb101a756a62f385fdc356d1b7280cec8ef801124b16f98812a15b4708e345b96cc5b29a4d6e0a7ddbbd24ec957621c03d5697f5c3526ea1177ea753b9b0dd453ae2b75021ee4388d7d2108928d4971cec5472ddc284bd4325a5fc132b67b86cb0bc925a4ea113a0b7692835bf4d06b72507c1232fda344c69de732aca8205cdf62b3249b1ad1ab5d62711471fb170f893e0732c2c42521e74d9745100f2fc551506a07f734594b8b468e965f0642d0459ad70449cb1b4aa32559d286462306d66a536b89f650962af26985cc82c89651520dab9083a842f4dc5bd972074188b9f42b76ea3b26393203da7ca734159e093ea52689f4bcd3051af4772e4e13e75d4d6082e68e5837f318d9b424c300ef49e59e46a4b228cace3cedb38b1f9f5652871a19ca6cb211c444a8193336f09a1ec85cbd02cc3e22988f25a864d111bb0af008cb4b47e6728a41359d6a14198b2cdbba0f2917a4b7372d9d17d7034b650fedda518f8eea10b7961a27d9c0786051c014620f32f43341a5fb41457d8940cad7d9ba99d396c2c15e1ecc30560eead12faf6b8a98999938a9ed7ac82e23ec5b85e4f0b3850af422d5b429b06c79f5a9f162eba0b3f5258c56154ace4d1cbdb933c5fdbb8b0cb3dc51eb80ff79caa15527a623744cd5f9a9af250fd204ae06db563100a9e325178760be2788f36c3c6fd2068f651b85f41ba158d637e059ba1899950639cc5adc2e06fdf728751a660b57bb3bc9ff4bace26b8f160eb69b3de77ec33a21621a98bcfaf3461be45fe6658498771abf50407080a0a89763d1495754bb3dc1b9316fe7a1c61f28255dd157bdec7560a953dc04f13b730f680d2300fb0d4b22656e3d1449386b43d07902d020b341e8f851d179500f1241e8d27fca0e0d395d1d97acc544c5feb7fdd19f029ab2e13783f86097a475c0fe269004a8886f17a38803dac52d2168a8ddbc80ef9910f0138308d4962209809ce3bb6af9e0f891f3dea77aa71d41b11e1ea055256540893353ac10c709c0ee0ac2aba9086121b56c0839b19f663055ffc19eeb20c843ab1aa1c524aa84a50b666d52c1b0e1bcd787840921d3a583de843dee9955edd816f7138af3ef61a7cd036b892fc10b3a90a0e063d3e20225831a8290472b2315c7628ed64da66cc38fcd75612040672c7f126d3ae00aa8ba21d126175f5ca24defcd4dfe228a6c932c06fdb2e409f942cd3dbf117f286cc958006b046b7d735df32b73006abee9dc0121d393acc45430f7f90ae0818a0afcf2d7119a2663319f3213f0cb7d7d55baf7bacca3c8b696052a0d25bc810fd328fbecf37d66527aaa654aee4a8e659d9a06cf75f339c884346d189379b371e4a40c24f1843474ce4f3ec7e11c5921283cb96da633e6c19a025d54a433e65493ed8065368aa2a2d291070b932b61db08f4b035c1400ded1f8587d5a3219591bd6f8632db9f32acc2346365569de80069c5c46640d53a2edafe633a5d6d44397050598378efa1fbe5be7d3afd3fb8d2d484e16d4d621ce9e1a76571a25969192076f00d8ff37d8086ed5e35dfc629a3c2d39ac0e1cd57729009e1453ea0de98a8835e475d22b34d9a4fb21f59f070ddcbb1866ec662d4d19442ee3f2253db45638ea36a7eac75f768e947cd68f45c6c11d3d2a76f6d53a72ab551d6749158b671b2342ac349267fb7f263fda86d195f719af54e8a6773ba23f6a602bc7825baf102611ed4d8c453468e2af58503604587d2a89247b424e05a8fffbd36690cdc8c569e106c0ddb932ffa86396b42386e3079a766653931932661b66868f6c47fa22a24052ab7683fb4c1ef6d032f1f93220e0086634991146a7e29d9337757814df0d7f9597a8e2ea79434c002385ddee69dd807d256d8c2b740698cbe1701ecdff8485dfd219511636f89d3a30ae439bc57da15cb2af7de4285fb2ae6f3161bebfd94d08f096cc1341856689370bd7b28306b6e3ac2868d82c3b50f8873da7ee26b5be0517cdb230adfbf3336070f0663108ed8c368dd7a6fecc33aaf674f22c9c4fcf0631614d1d5f518b427843743d19fbc6d4c7062b7ceff4749a2be7abf683a25669a86171272e09cf1a396d45da0ed4eadd9c77f228375076a230a9e32c1a400e6f4d5f28eac8fc263b3a7a8fbac3a29c8a305944102d33c70638b4e5b761eb067dd7e62bf3a9584920beb4275e8d41a72fcb5e159971be5f8a0dda73dfaa697968a6a68568f42de0e22580e48856f0d64f00ba243d2d661ac0df9c10d096eeac1bdc13d3b1e2684e6c249ef8e2ad623132fafcf2ec71b05ec7164cebd1374f0b15a6b595fc3c6eebf0ef11fb83b79a25fcd1460ea21451b07931d67deecad07f02fcb1e6a3c0c5640188a33ea5e7b790f25b140f2791ba469010fb942d50be316214507872c037c21d8dbccfe3a4bdf46ce2554e67c322ffcf75ad459a59cc909b486367066f5820f4f903089b260f724379b2243b80a03bd0ee9863140818092bab9d55f1b786b84a1185c5bceceafe442fbef098db785b208cad1a815838da4f9314d49bd23cb69bfc754c98fd84a7d42e273c19a3aa8afdd317f6fcbdc6cd37f969a5b962da70faa132c54ef8fd49b09ee2a4227c6766d2a379fa8f367c4c41bbc62318e8ce9a2972274078b8a825ef7c315ce207e51d9b2f7d40d9f005c7aad4f8f0d03de3da23648d510ec1460a6715d0b2b96a052ae8e08cd5b499a9e4f3f4b955571ea1201efa8c8e5e21729bf1b75561fc523be1a7bb20461639f4d5a40003e45d6a0be6997d743d93cedb40839a4ef1da96b89b612caadde87389f9a50af85091257ff3ecd65a2d18afab4be65d2febfaa5c5687a6ab7632abeb35157404f37a4f8b3fcfd2d35489cbf7a9877b65bd7bda67dce96fbaf9a98213e49ac5be51263321f495a21e64d871d15f74d889e52a1beaed798806453437c3568a2ed19694d8c05b0498a2e4eb4800952253f5308483691a48a9f73de348d082d4bb6a9f59804c9142ea0f1aa25ad1a3811b0899d8bb5b6bbad5ba458b50ffb14b8e041f3c9e17e6d63d4ec0df88c0dccb3ceb9d08b5cc3d430a422a0979b6fe36e9f9a7c706df6cec6faea9e1d8d0ca74db67b0d5b2837c405631fa8414afc2d021128c0af8996960e7446993a1a46c25995364408c30a2d1de6dcc2706f61db02f1b8a104162bd38e69c8e1f06d8ef4f42f6b679d0706076dd5dd6b872503e6ab6eea867cb6bfebaf4f057fa9b73f28eb3307efcb3674b58398495671d96058156235fb297b795dfa513185cc8f660e8aaa83276f051ea4405555e36e706c115650f78bdfc39a9df69c31ffe071cd19f42cbbd08a1fa222c47166f15d5d406e682b37</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组学习笔记（一）</title>
      <link href="/2020/01/18/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/01/18/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>树状数组是一种实现较简单的数据结构，但只能维护满足前缀性质的信息。</p><a id="more"></a><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>树状数组（Binary Indexed Tree）跟线段树有某种异曲同工之妙。</p><p>假设现在有一个有 16 个元素的数组 <code>a</code>。</p><p>那么对应的树状数组 <code>c</code> 就是这个样子：</p><p><code>c[1]</code> 管理 <code>a[1]</code>，<code>c[2]</code> 管理 <code>a[1]</code> 和 <code>a[2]</code>，<code>c[3]</code> 管理 <code>a[3]</code>，<code>c[4]</code> 管理 <code>a[1], a[2], a[3], a[4]</code>，……</p><p>我们知道，任意整数都可以表示为任意个 2 的 $n$ 次方的和，那么我们也可以用 <code>c</code> 数组存储一些数字的和。</p><p>所以，当 $x$ 为奇数时，<code>c[x]</code> 管理的就是 <code>a[x]</code>。如果 $x$ 为 2 的整数次幂，那 <code>c[x]</code> 管理的就是从 <code>a[1]</code> 到 <code>a[x]</code>。如果是第三种情况呢？那 <code>c[x]</code> 管理的就是上一个为 2 的整数次幂的下一个元素到当前元素。</p><p>现在以区间和为例，假设我们要求区间 $[5, 13]$ 的和：</p><p>首先我们求出从第一个元素到第 13 个元素的和：我们先查询 <code>c[13]</code>。</p><p>欸？它好像只管理 <code>a[13]</code> 一个元素？那就顺着这个往前寻找，找到 <code>c[12]</code>。</p><p>emmm…<code>c[12]</code> 管理的是 <code>a[9]</code> 到 <code>a[12]</code>，加上，继续向前寻找，找到了 <code>c[8]</code>。</p><p>哇，8 是 2 的 3 次方，<code>c[8]</code> 管理的是 <code>a[1]</code> 到 <code>a[8]</code> 欸，加上，我们就完成了求从第 1 个元素到第 13 个元素的和的操作。</p><p>同理，我们可以求出从第 1 个元素到第 5 - 1 = 4 个元素的和，用前缀和的思想，把两数相减，我们就求得了答案。</p><p>那修改操作呢？</p><p>假设我们要修改 <code>a[11]</code> 的值，显然，我们需要修改 <code>c[11], c[12], c[16]</code> 的值。</p><p>好像挺有规律的？</p><p>换个点，修改 <code>a[6]</code> 的值，那我们需要修改 <code>c[6], c[8], c[16]</code> 的值。</p><p>可以看出，我们要知道离它最近的 2 的整数次幂的位置或者离它最近的偶数的位置，然后就好修改了。</p><p>知道了这些，我们就可以写代码了。</p><p>是吗？</p><p>我们知道了主要思想，但是我们怎么才能求出离它最近的 2 的整数次幂呢？换句话说，怎么才能知道这个<strong>距离</strong>呢？</p><p>在这之前，我们需要了解一些二进制相关的知识。</p><p>现在，我们以 10 为例。我们已经知道了，答案是 2。</p><p>这里直接给出方法，很短，但很富有智慧：</p><p><code>x &amp; -x</code>。</p><p>10 的二进制为 1010，而 -x 为 0110。</p><p>这又是为什么呢？</p><p>这就要涉及到计算机中编码存储的相关知识了，更加复杂，我们只需要知道这个式子的作用就行了。它返回的是 x 的二进制从右往左数第一个 1 的位置加上其左边的 0 后组成的二进制数所对应的十进制数。</p><p>即 $1010 \And 0110 = 0010$，对应的就是 2，我们要的答案。</p><p>另外吐槽一句，不知道这个 <code>lowbit</code> 是谁最开始说的，歪果仁好像并没有这种说法，直接写 <code>x &amp; -x</code>……</p><p>再说一句，这里面也有一些倍增的思想。</p><p>于是我们可以开始写代码了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>每次修改，然后加上当前位置的 <code>lowbit</code> 值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n) <span class="comment">// 保证范围不要越界了</span></span><br><span class="line">    &#123;</span><br><span class="line">        c[x] += k; <span class="comment">// 修改能管理到 a[x] 的 c 数组的对应位置</span></span><br><span class="line">        x += lowbit(x); <span class="comment">// 加上距离</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><p>相当于对每个点单点修改。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    read(x);</span><br><span class="line">    add(i, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>按照上文的思路查询。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们就学会了最简单的树状数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">500010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        c[x] += k;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s += c[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x);</span><br><span class="line">        add(i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, l, r;</span><br><span class="line">        read(opt), read(l), read(r);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)   add(l, r);</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(r) - query(l - <span class="number">1</span>));    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.hackerearth.com/zh/practice/notes/binary-indexed-tree-or-fenwick-tree/" target="_blank" rel="noopener">Binary Indexed Tree or Fenwick Tree | Hacker Earth</a></p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 树状数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[SCOI2005] 骑士精神</title>
      <link href="/2020/01/12/SCOI2005-%E9%AA%91%E5%A3%AB%E7%B2%BE%E7%A5%9E/"/>
      <url>/2020/01/12/SCOI2005-%E9%AA%91%E5%A3%AB%E7%B2%BE%E7%A5%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/2151" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：给出一个 $5 \times 5$ 的棋盘的初始状态，问最少经过多少步可以到达目标状态。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考虑将问题转换为移动空格，然后对暴力进行优化。</p><p>这道题的估价函数很好想，就是最终状态离当前状态差了多少，进行 IDA* 即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="keyword">final</span>[<span class="number">7</span>][<span class="number">7</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-2</span>, <span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[] = &#123;<span class="number">2</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> t, sx, sy;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">bool</span> b, flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="keyword">final</span>[i][j])</span><br><span class="line">                ++cnt;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">idaStar</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep == max)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!h())   b = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (nx &lt; <span class="number">1</span> || nx &gt; n || ny &lt; <span class="number">1</span> || ny &gt; n)   <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">std</span>::swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[nx][ny]);</span><br><span class="line">        <span class="keyword">if</span> (h() + dep &lt;= max) idaStar(dep + <span class="number">1</span>, nx, ny, max);</span><br><span class="line">        <span class="built_in">std</span>::swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[nx][ny]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="literal">false</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'1'</span>)  <span class="built_in">map</span>[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>    <span class="keyword">if</span> (ch == <span class="string">'0'</span>)  <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span>    </span><br><span class="line">                &#123;</span><br><span class="line">                    sx = i;</span><br><span class="line">                    sy = j;</span><br><span class="line">                    <span class="built_in">map</span>[i][j] = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (!h())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span> &amp;&amp; (!flag); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            idaStar(<span class="number">0</span>, sx, sy, i);</span><br><span class="line">            <span class="keyword">if</span> (b)  </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)  <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 搜索 </category>
          
          <category> IDA* </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hzwer 的分块入门 2</title>
      <link href="/2020/01/10/hzwer%E7%9A%84%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8-2/"/>
      <url>/2020/01/10/hzwer%E7%9A%84%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8-2/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/6278" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：写一种数据结构，支持区间修改（加法），询问区间内小于定值的元素个数。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>有了上一道题的分块经验，我们可以很轻松的写出区间修改的代码。</p><p>但是这道题还要求我们求出区间内小于定值的元素个数。</p><p>思考什么方法能快速的求出这个东西呢？</p><p>排序 + 二分。</p><p>所以我们可以先把块内元素排序，然后查询时二分即可。对于不在整块中的点，我们还是暴力修改，暴力统计答案。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v[<span class="number">510</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50010</span>], add[<span class="number">50010</span>], pos[<span class="number">50010</span>];</span><br><span class="line"><span class="keyword">int</span> n, len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[pos].clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (pos - <span class="number">1</span>) * len + <span class="number">1</span>; i &lt;= <span class="built_in">std</span>::min(pos * len, n); ++i)</span><br><span class="line">        v[pos].push_back(a[i]);</span><br><span class="line">    <span class="built_in">std</span>::sort(v[pos].begin(), v[pos].end());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= <span class="built_in">std</span>::min(pos[l] * len, r); ++i)</span><br><span class="line">        a[i] += c;</span><br><span class="line">    sort(pos[l]);</span><br><span class="line">    <span class="keyword">if</span> (pos[l] != pos[r])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (pos[r] - <span class="number">1</span>) * len + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">            a[i] += c;</span><br><span class="line">        sort(pos[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pos[l] + <span class="number">1</span>; i &lt;= pos[r] - <span class="number">1</span>; ++i)</span><br><span class="line">        add[i] += c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= <span class="built_in">std</span>::min(pos[l] * len, r); ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] + add[pos[l]] &lt; c) </span><br><span class="line">            ++ans;</span><br><span class="line">    <span class="keyword">if</span> (pos[l] != pos[r])</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (pos[r] - <span class="number">1</span>) * len + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">            <span class="keyword">if</span> (a[i] + add[pos[r]] &lt; c)</span><br><span class="line">                ++ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pos[l] + <span class="number">1</span>; i &lt;= pos[r] - <span class="number">1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = c - add[i];</span><br><span class="line">        ans += <span class="built_in">std</span>::lower_bound(v[i].begin(), v[i].end(), x) - v[i].begin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        read(a[i]);</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        pos[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">        v[pos[i]].push_back(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        <span class="built_in">std</span>::sort(v[i].begin(), v[i].end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, l, r, c;</span><br><span class="line">        read(opt), read(l), read(r), read(c);</span><br><span class="line">        <span class="keyword">if</span> (!opt)   update(l, r, c);</span><br><span class="line">        <span class="keyword">else</span>    query(l, r, c * c);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>分块大概需要思考的东西有以下：</p><ul><li>怎么整块查询？</li><li>对于不在整块中的点如何操作？</li><li>需要预处理什么（复杂度不能超过后面的操作）？</li></ul><p>另外，有一些特定的值，大概总结了一下：</p><p>首先，<code>len</code> 是块的长度。</p><ul><li><code>pos[i]</code> 第 $i$ 个点所在的块</li><li><code>pos[i - 1] * len + 1</code> 第 $i$ 个点所在的块的左端点</li><li><code>pos[i] * len</code> 第 $i$ 个点所在的块的右端点</li></ul><p>在实际操作中，往往还要加上 $\min$ 来保证范围。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 分块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hzwer 的分块入门 1</title>
      <link href="/2020/01/09/hzwer%E7%9A%84%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8-1/"/>
      <url>/2020/01/09/hzwer%E7%9A%84%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/6277" target="_blank" rel="noopener">题目链接</a></p><p>题目大意：写一种数据结构，支持区间修改（加法），单点查询。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>分块的入门题肯定要拿分块写了。</p><p>其实这种东西我早有听说，就是一直懒得学……</p><p>分块，即意味着把整个序列分成若干个块（一般为 $\sqrt{n}$ 个），如果对应操作的范围在同一个块之间，那就对这个范围对应的块进行操作，如果不在同一个块，那就先处理范围包括的整块，然后暴力处理余下的部分。</p><p>个人认为分块跟线段树的差别就在于，线段树将一个序列每次划分成 2 块，相当于这个树的深度为 $\log n$，而分块只分三层，第一层是原序列，第二层是各个块，第三层就是单个点了。</p><p>而且分块的操作一般更加灵活，比起线段树能够支持更多的操作，写起来也更好写。</p><p>这道题需要支持区间修改，单点查询，我们可以考虑这样的思路：</p><p>首先除了原数组之外，我们定义一个 <code>add</code> 数组，代表某个块在若干次操作后加上的值。</p><p>如果修改的左右端点在同一个块中或者包括了若干个整块，那么直接修改这个块或者这若干个整块的 <code>add</code> 值。</p><p>如果不在，那就再将不在整块中的点暴力修改，不改变不在整块中的点所在的块的 <code>add</code> 值。</p><p>查询时输出序列中的点的值与所在块的 <code>add</code> 值的和。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>首先约定 $n$ 是原序列长度，$len = \sqrt n$ 是块的个数。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>显然，我们需要知道每个点所在的块是第几个。</p><p>这个可以手算，小学数学，随便推几个就可以看出第 $i$ 个点在第 $\dfrac{i - 1}{\sqrt{n}} + 1$ 个块中。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    pos[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>直接看代码吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= <span class="built_in">std</span>::min(pos[l] * len, r); ++i)</span><br><span class="line">    a[i] += c;</span><br></pre></td></tr></table></figure><p>处理左边多出来的点。<code>pos[l] * len</code> 就是第 $l$ 个点所在的块的右端点，这里取了一个 $\min$ 防止加到了不在范围内的数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pos[l] != pos[r])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (pos[r] - <span class="number">1</span>) * len + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">        a[i] += c;</span><br></pre></td></tr></table></figure><p>处理右边多出来的点，这个应该好理解了，<code>(pos[r] - 1) * len + 1</code> 就是第 $r$ 所在的块的左端点，然后暴力修改。</p><p>那为什么要加一个判断呢？为了防止和第一段代码处理的区间重复。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos[l] + <span class="number">1</span>; i &lt;= pos[r] - <span class="number">1</span>; ++i)</span><br><span class="line">    add[i] += c;</span><br></pre></td></tr></table></figure><p>处理整块。注意这里是从 <code>pos[l] + 1</code> 到 <code>pos[r] - 1</code>。对于 $l$ 和 $r$ 正好在某一个区间的左右端点上时会采用会直接用第一段代码求解，毕竟不差那点时间（大雾）。</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>直接输出 <code>a[i] + add[pos[i]]</code>。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Block</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> add[<span class="number">50010</span>], pos[<span class="number">50010</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            pos[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= <span class="built_in">std</span>::min(pos[l] * len, r); ++i)</span><br><span class="line">            a[i] += c;</span><br><span class="line">        <span class="keyword">if</span> (pos[l] != pos[r])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = (pos[r] - <span class="number">1</span>) * len + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">                a[i] += c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos[l] + <span class="number">1</span>; i &lt;= pos[r] - <span class="number">1</span>; ++i)</span><br><span class="line">            add[i] += c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50010</span>];</span><br><span class="line"><span class="keyword">int</span> n, l, r, opt, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    block.len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        read(a[i]);</span><br><span class="line">    block.init(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(opt), read(l), read(r), read(c);</span><br><span class="line">        <span class="keyword">if</span> (opt)    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[r] + block.add[block.pos[r]] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>    block.update(l, r, c, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 分块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[USACO07DEC] Building Roads</title>
      <link href="/2020/01/03/USACO07DEC-Building-Roads/"/>
      <url>/2020/01/03/USACO07DEC-Building-Roads/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P2872" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一道最小生成树的裸题，只不过有些边已经连好了。</p><p>所以我们只需要对连好的边进行一下处理，把他们的起点和终点在跑最小生成树前就放在同一集合里，如果两个点还没有在同一集合里的话就把边数加 1。</p><p>然后我们会发现只有 60 分，为什么呢？</p><p>因为这道 ** 题卡精度，我们在求两点距离时把能加 <code>double</code> 的地方都加上就能过了。</p><p>另外还有一种做法是在处理修好的路时加一条边权为 0 的边，这样也是对的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;a, <span class="keyword">const</span> Edge &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; edge[<span class="number">1000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">int</span> find[<span class="number">1010</span>], x[<span class="number">1010</span>], y[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, tot, cnt; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionFind</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find[x] == x ? x : find[x] = unionFind(find[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::sort(edge + <span class="number">1</span>, edge + tot + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = unionFind(edge[i].u), v = unionFind(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span> (u == v) <span class="keyword">continue</span>;</span><br><span class="line">        find[u] = v;</span><br><span class="line">        ans += edge[i].dis;</span><br><span class="line">        <span class="keyword">if</span> (++cnt == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        find[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x[i]), read(y[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> dis = (<span class="keyword">double</span>)<span class="built_in">sqrt</span>((<span class="keyword">double</span>)(x[i] - x[j]) * (x[i] - x[j]) + (<span class="keyword">double</span>)(y[i] - y[j]) * (y[i] - y[j]));</span><br><span class="line">            edge[++tot].u = i;</span><br><span class="line">            edge[tot].v = j;</span><br><span class="line">            edge[tot].dis = dis;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        read(u), read(v);</span><br><span class="line">        u = unionFind(u), v = unionFind(v);</span><br><span class="line">        <span class="keyword">if</span> (u != v) ++cnt;</span><br><span class="line">        find[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    kruskal();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>从这道题学到了卡精度的毒瘤，以后有机会给别人出题的话一定要卡一次（大雾）。</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 最小生成树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USACO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[SCOI2012] 滑雪</title>
      <link href="/2019/12/29/SCOI2012-%E6%BB%91%E9%9B%AA/"/>
      <url>/2019/12/29/SCOI2012-%E6%BB%91%E9%9B%AA/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/2373" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一道比较综合的最小生成树的题。</p><p>显然，不能在读入时就建图，否则有些边会因为题目中 $h_i \ge h_j$ 的限制而出错。</p><p>所以在第一次读入时建图后从第一个点开始广搜建立新图，对新图求最小生成树。</p><p>这时结构体里的比较函数也要改变，以高度为第一关键字，长度为第二关键字排序，才能保证题目的要求。</p><p>题目里还要求求出最多可能到达的点，这个在广搜的时候处理就行。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, dis;</span><br><span class="line">&#125; edge1[<span class="number">2000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, dis;</span><br><span class="line">&#125; edge2[<span class="number">2000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nowPos, lastPos;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> find[<span class="number">100010</span>], head[<span class="number">100010</span>], h[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, tot, cnt, cnt2, sum;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge2 &amp;a, <span class="keyword">const</span> Edge2 &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (h[a.v] == h[b.v])   <span class="keyword">return</span> a.dis &lt; b.dis;</span><br><span class="line">    <span class="keyword">return</span> h[a.v] &gt; h[b.v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge1[++cnt].to = y;</span><br><span class="line">    edge1[cnt].dis = dis;</span><br><span class="line">    edge1[cnt].next = head[x];</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge2[++cnt2].u = x;</span><br><span class="line">    edge2[cnt2].v = y;</span><br><span class="line">    edge2[cnt2].dis = dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionFind</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find[x] == x ? x : find[x] = unionFind(find[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::sort(edge2 + <span class="number">1</span>, edge2 + cnt2 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; ++i)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="keyword">int</span> u = unionFind(edge2[i].u), v = unionFind(edge2[i].v);</span><br><span class="line">        <span class="keyword">if</span> (u == v) <span class="keyword">continue</span>;</span><br><span class="line">        ans += edge2[i].dis;</span><br><span class="line">        find[u] = v;</span><br><span class="line">        <span class="keyword">if</span> (++tot == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;Node&gt; que;</span><br><span class="line">    que.push((Node)&#123;start, <span class="number">0</span>&#125;);</span><br><span class="line">    vis[start] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Node now = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">int</span> nowPos = now.nowPos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[nowPos]; ~i; i = edge1[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to = edge1[i].to;</span><br><span class="line">            <span class="comment">// if (to == now.lastPos)  continue;</span></span><br><span class="line">            addEdge2(nowPos, to, edge1[i].dis);</span><br><span class="line">            <span class="keyword">if</span> (!vis[to])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[to] = <span class="literal">true</span>;</span><br><span class="line">                ++sum;</span><br><span class="line">                que.push((Node)&#123;to, nowPos&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(h[i]);</span><br><span class="line">        find[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, k;</span><br><span class="line">        read(u), read(v), read(k);</span><br><span class="line">        <span class="keyword">if</span> (h[u] &gt;= h[v])   addEdge1(u, v, k);</span><br><span class="line">        <span class="keyword">if</span> (h[u] &lt;= h[v])   addEdge1(v, u, k);</span><br><span class="line">    &#125;</span><br><span class="line">    bfs(<span class="number">1</span>);</span><br><span class="line">    kruskal();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %lld"</span>, sum + <span class="number">1</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 最小生成树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HAOI2012] 音量调节</title>
      <link href="/2019/12/12/HAOI2012-%E9%9F%B3%E9%87%8F%E8%B0%83%E8%8A%82/"/>
      <url>/2019/12/12/HAOI2012-%E9%9F%B3%E9%87%8F%E8%B0%83%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P1877" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一道变形的01背包。</p><p>显然，每次音量只能加或减。</p><p>那么判断一下边界，以能否达到某音量作为状态转移即可。</p><p>设状态 $f_{i, j}$ 表示第 $i$ 首歌能否达到 $j$ 音量。</p><p>状态转移方程为</p><p>$$f_{i, j + c_i} = true (f_{i - 1, j} = true, j + c_i \le max)$$</p><p>$$f_{i, j - c_i} = true (f_{i - 1, j} = true, j - c_i \ge 0)$$</p><p>初始条件 $f_{0, begin} = true$。</p><p>最后从 $max$ 循环到 $0$，如果 $f_{n, i} = true$ 则说明 $i$ 为答案，否则无解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">60</span>];</span><br><span class="line"><span class="keyword">int</span> n, begin, max;</span><br><span class="line"><span class="keyword">bool</span> f[<span class="number">60</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; begin &gt;&gt; max;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">    f[<span class="number">0</span>][begin] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = max; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - c[i] &gt;= <span class="number">0</span> &amp;&amp; f[i - <span class="number">1</span>][j])</span><br><span class="line">                f[i][j - c[i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (j + c[i] &lt;= max &amp;&amp; f[i - <span class="number">1</span>][j])</span><br><span class="line">                f[i][j + c[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = max; i; --i)</span><br><span class="line">        <span class="keyword">if</span> (f[n][i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 动态规划 </category>
          
          <category> 背包 DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HAOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[SCOI2011] 糖果</title>
      <link href="/2019/12/10/SCOI2011-%E7%B3%96%E6%9E%9C/"/>
      <url>/2019/12/10/SCOI2011-%E7%B3%96%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://loj.ac/problem/2436" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一道差分约束系统的模板题。</p><p>差分约束系统指的是，在一个序列 $a_1, a_2, a_3, \cdots, a_n$ 中，有 $m$ 个形如 $a_i - a_j \le k$ 的约束条件，其中 $k$ 是常数。</p><p>我们需要求出一种方法，使得所有的约束条件得到满足，否则判断出无解。</p><p>对于任何一个约束条件 $a_i - a_j \le k$ 都可以变形为 $a_i \le a_j + k$，这与最短路算法中的松弛操作很像。所以我们可以把每个 $a_i$ 看为一个图中的点，每个约束条件 $a_i - a_j \le k$ 看为一条从 $j$ 到 $i$ 的权值为 $k$ 的边。</p><p>求解时，设 <code>dis[0] = 0</code>，并向每个点连一条边，以 $0$ 为起点跑单源最短路。如果图中存在负环，则说明无解，否则 <code>dis</code> 数组即为原差分约束系统的一组解。</p><p>注意到如果 <code>dis</code> 数组是一组解，那么对于任意常数 $d$， <code>dis[i] + d</code> 也是一组解。</p><p>对于这道题，题目给出了五种操作，依次判断即可。<strong>需要注意的是，在进行变形的时候一定要根据实际情况来判断，而不是生硬的按照公式来变形，不然就会导致出错。</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, dis;</span><br><span class="line">&#125; edge[<span class="number">300010</span>];</span><br><span class="line"></span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">100010</span>], dis[<span class="number">100010</span>], times[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n, k, cnt;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].to = y;</span><br><span class="line">    edge[cnt].dis = dis;</span><br><span class="line">    edge[cnt].next = head[x];</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-0x3f3f3f3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = que.front();</span><br><span class="line">        vis[now] = <span class="literal">false</span>;</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (++times[now] == n)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (dis[to] &lt; dis[now] + edge[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[to] = dis[now] + edge[i].dis;</span><br><span class="line">                <span class="keyword">if</span> (!vis[to])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[to] = <span class="literal">true</span>;</span><br><span class="line">                    que.push(to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    read(n), read(k);</span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, a, b;</span><br><span class="line">        read(x), read(a), read(b);</span><br><span class="line">        <span class="keyword">switch</span> (x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: addEdge(a, b, <span class="number">0</span>);   addEdge(b, a, <span class="number">0</span>);   <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a == b)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                addEdge(a, b, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: addEdge(b, a, <span class="number">0</span>);   <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a == b)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                addEdge(b, a, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: addEdge(a, b, <span class="number">0</span>);   <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        addEdge(<span class="number">0</span>, i, <span class="number">1</span>);</span><br><span class="line">    spfa(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans += dis[i];</span><br><span class="line">    <span class="keyword">if</span> (!flag)  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 差分约束 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JLOI2011] 飞行路线</title>
      <link href="/2019/11/25/JLOI2011-%E9%A3%9E%E8%A1%8C%E8%B7%AF%E7%BA%BF/"/>
      <url>/2019/11/25/JLOI2011-%E9%A3%9E%E8%A1%8C%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P4568" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目给了我们一个图，但是我们可以免费通过任何一条边 $k$ 次，求在这种情况下的单源最短路。</p><p>这里就要引入分层图的概念。顾名思义，分层图中有很多层，其中每一层都有一条到下一层的权值为 0 的有向边。</p><p>也就是说，对于每一条边，它的起点会向下一层的这条边的终点引一条权值为 0 的边。</p><p>这样一来，我们的答案即为 <code>dis[t + n * k]</code>，其中 $t$ 为终点，$n$ 为点的个数，随便写个最短路就行。</p><p>但是这样一来，随着图规模的增大，算法的时间复杂度也会增大，这种方法的时间复杂度为 $O(km^2 \log m)$，在极端数据下会超时。</p><p>有没有优化的方法呢？</p><p>我们来看看关键的松弛操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (dis[edge[i].to] &gt; dis[top.pos] + edge[i].dis)</span><br><span class="line">&#123;</span><br><span class="line">    dis[edge[i].to] = dis[top.pos] + edge[i].dis;</span><br><span class="line">    que.push((Node)&#123;edge[i].to, dis[edge[i].to]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再考虑一下给出的 $k$，我们就可能联想到 dp <del>反正我是没想到</del>。</p><p>设 $dis_{i, j}$ 表示第 $i$ 个结点时用了 $j$ 次免费的最短路长度，则状态转移方程为</p><p>$$dis_{i, j} = \min { \min { dis_{from, j-1} } , \min { dis_{from, j} + w } }$$</p><p>其中 $from$ 是转移前的点，$w$ 是当前边的权值。</p><p>在进行 dijkstra 的时候判断一下即可。</p><p>另外的，$dis_{i, j}$ 在最开始时要全部设为 $+\infty$。</p><p>我们就成功的在 $O(km \log m)$ 的时间复杂度内完成了此题。</p><p>这道题还有一个小坑点，编号是从 0 开始的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))    &#123; f |= ch == <span class="string">'-'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))     &#123; x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> solve1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, dis;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.dis &gt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to, dis;</span><br><span class="line">&#125; edge[<span class="number">5000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[<span class="number">100010</span>], dis[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, k, s, t, cnt;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].to = y;</span><br><span class="line">    edge[cnt].dis = dis;</span><br><span class="line">    edge[cnt].next = head[x];</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">std</span>::priority_queue&lt;Node&gt; que;</span><br><span class="line">    que.push((Node)&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Node top = que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[top.pos])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[top.pos] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (reg <span class="keyword">int</span> i = head[top.pos]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[edge[i].to] &gt; dis[top.pos] + edge[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[edge[i].to] = dis[top.pos] + edge[i].dis;</span><br><span class="line">                que.push((Node)&#123;edge[i].to, dis[edge[i].to]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, inf, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vis[now] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (reg <span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[edge[i].to] &gt; dis[now] + edge[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[edge[i].to] = dis[now] + edge[i].dis;</span><br><span class="line">                <span class="keyword">if</span> (!vis[edge[i].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[edge[i].to] = <span class="literal">true</span>;</span><br><span class="line">                    que.push(edge[i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    read(n), read(m), read(k);</span><br><span class="line">    read(s), read(t);</span><br><span class="line">    <span class="keyword">for</span> (reg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        read(a), read(b), read(c);</span><br><span class="line">        addEdge(a, b, c);</span><br><span class="line">        addEdge(b, a, c);</span><br><span class="line">        <span class="keyword">for</span> (reg <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            addEdge(a + (j - <span class="number">1</span>) * n, b + j * n, <span class="number">0</span>);</span><br><span class="line">            addEdge(b + (j - <span class="number">1</span>) * n, a + j * n, <span class="number">0</span>);</span><br><span class="line">            addEdge(a + j * n, b + j * n, c);</span><br><span class="line">            addEdge(b + j * n, a + j * n, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (reg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">        addEdge(t + (i - <span class="number">1</span>) * n, t + i * n, <span class="number">0</span>);</span><br><span class="line">    dijkstra(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[t + k * n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// solve1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> solve2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, dis, cnt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.dis &gt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to, dis;</span><br><span class="line">&#125; edge[<span class="number">5000010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">100010</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, k, s, t, cnt;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100010</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].to = y;</span><br><span class="line">    edge[cnt].dis = dis;</span><br><span class="line">    edge[cnt].next = head[x];</span><br><span class="line">    head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x7f7f7f7f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[s][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::priority_queue &lt;Node&gt; que;</span><br><span class="line">    que.push((Node)&#123;s, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Node top = que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[top.pos][top.cnt])  <span class="keyword">continue</span>;</span><br><span class="line">        vis[top.pos][top.cnt] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[top.pos]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (top.cnt &lt; k &amp;&amp; dis[edge[i].to][top.cnt + <span class="number">1</span>] &gt; dis[top.pos][top.cnt])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[edge[i].to][top.cnt + <span class="number">1</span>] = dis[top.pos][top.cnt];</span><br><span class="line">                que.push((Node)&#123;edge[i].to, dis[edge[i].to][top.cnt + <span class="number">1</span>], top.cnt + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dis[edge[i].to][top.cnt] &gt; dis[top.pos][top.cnt] + edge[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[edge[i].to][top.cnt] = dis[top.pos][top.cnt] + edge[i].dis;</span><br><span class="line">                que.push(Node&#123;edge[i].to, dis[edge[i].to][top.cnt], top.cnt&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// solve2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">    read(n), read(m), read(k);</span><br><span class="line">    read(s), read(t);</span><br><span class="line">    ++s, ++t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        read(a), read(b), read(c);</span><br><span class="line">        ++a;</span><br><span class="line">        ++b;</span><br><span class="line">        addEdge(a, b, c);</span><br><span class="line">        addEdge(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(s);</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">        ans = <span class="built_in">std</span>::min(ans, dis[t][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//solve1::main();</span></span><br><span class="line">    solve2::main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 图论 </category>
          
          <category> 最短路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JLOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIp2016] 海港</title>
      <link href="/2019/10/25/NOIp2016-%E6%B5%B7%E6%B8%AF/"/>
      <url>/2019/10/25/NOIp2016-%E6%B5%B7%E6%B8%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P2058" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a>   <h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们拿到这道题，最先想到的应该是按照每艘船存储，但是这样的话在 $t_i \ge 86400$ 时就很难更新答案。</p><p>我们不妨换个思路，按照人来存储。因为 $\sum_{}^{} k_i \le 3 \times 10 ^ 5$，所以我们可以用一个桶来存储，这样就可以方便的更新答案了。</p><p>每读入一艘船，我们就把船上的人依次入队，用桶更新答案。如果当前时间大于 86400，就把队首往后移，每次更新桶，如果桶中的元素从大于 0 变为了 0 则让答案减一。</p><p>感觉这是这几年来 PJ T4 最简单的一道题了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> t[<span class="number">300010</span>], s[<span class="number">300010</span>], x[<span class="number">300010</span>], n, k, i, ans, j;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> time;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;time, &amp;k);</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            t[++i] = time;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x[i]);</span><br><span class="line">            <span class="keyword">if</span>(!s[x[i]])   ++ans;</span><br><span class="line">            ++s[x[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(time - t[j] &gt;= <span class="number">86400</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            --s[x[j]];</span><br><span class="line">            <span class="keyword">if</span>(!s[x[j]])    --ans;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Openjudge2719] Blah数集</title>
      <link href="/2019/10/25/openjudge2719-Blah%E6%95%B0%E9%9B%86%E9%A2%98%E8%A7%A3/"/>
      <url>/2019/10/25/openjudge2719-Blah%E6%95%B0%E9%9B%86%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="http://noi.openjudge.cn/ch0304/2729/" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>说实话拿到这道题我是懵的…</p><p>后来在 woshiluo 大佬的指点下，有了一点思路。</p><p>从题目中可以看出，集合 B 是升序排列的，于是我们可以用两个队列来存储 $2x + 1$ 和 $3x + 1$ 的值，然后每次将两个队列的队尾中较小的那个值作为新的 $x$ 值，这样就可以保证升序。</p><p>另外有一个小坑点，集合中的元素不能重复，所以需要特判当两个队列的队尾相等时的情况。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q2, q3;</span><br><span class="line">        q2.push(a * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        q3.push(a * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (--n)</span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (q2.front() &lt; q3.front())</span><br><span class="line">            &#123;</span><br><span class="line">                a = q2.front();</span><br><span class="line">                q2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>    <span class="keyword">if</span> (q2.front() == q3.front())</span><br><span class="line">            &#123;      </span><br><span class="line">                a = q2.front();</span><br><span class="line">                q2.pop(), q3.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a = q3.front();</span><br><span class="line">                q3.pop();</span><br><span class="line">            &#125;  </span><br><span class="line">            q2.push(a * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">            q3.push(a * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 数据结构 </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openjudge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NOIp2017] 奶酪</title>
      <link href="/2019/10/22/NOIp-2017-%E5%A5%B6%E9%85%AA/"/>
      <url>/2019/10/22/NOIp-2017-%E5%A5%B6%E9%85%AA/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://www.luogu.com.cn/problem/P3958" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先考虑怎么判断两个球是否互相连通。</p><p>容易想到当球心距小于等于 $2r$ 时两球相交。为了防止精度误差，我们将等式两边同时平方，即当 $(x_1-x_2)^2 + (y_1-y_2)^2 + (z_1-z_2)^2 \le 4r^2$ 时两球相交。</p><p>再考虑怎么判断能否从下表面进入一个球，容易想到当 $z - r \le 0$ 时可以进入这个球。</p><p>同理，当 $z + r \ge h$ 时可以到上表面。</p><p>于是我们可以写出 40 分的代码。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>对于这样一道水题，40 分肯定是不行的，于是我们考虑对我们的程序进行优化。</p><p>不难想出在每一次遍历一个球时，我们可以考虑给它打上标记。如果在搜索时搜到了已经搜过的球，就直接跳过搜下一个，这样我们就把时间复杂度降低为了 $O(n)$ 。</p><p>另外要注意因为涉及到平方运算，有可能会爆 int，所以要开 long long。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x, y, z;</span><br><span class="line">&#125; p[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t, n, h, r;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">bool</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> y, <span class="keyword">long</span> <span class="keyword">long</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (z + r &gt;= h)</span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ((x - p[i].x) * (x - p[i].x) + (y - p[i].y) * (y - p[i].y) + (z - p[i].z) * (z - p[i].z) &lt;= <span class="number">4</span> * r * r)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            dfs(p[i].x, p[i].y, p[i].z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        b = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; h &gt;&gt; r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].y &gt;&gt; p[i].z;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; (!b); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((!vis[i]) &amp;&amp; p[i].z - r &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dfs(p[i].x, p[i].y, p[i].z);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(b ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 搜索 </category>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CF3B] Lorry</title>
      <link href="/2019/10/22/CF3B-Lorry/"/>
      <url>/2019/10/22/CF3B-Lorry/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://vjudge.net/problem/CodeForces-3B" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在不考虑数据范围的情况下可以看出是一道 01 背包裸题。</p><p>但是 $v\le 10^9$，$n\le10^5$ ，妥妥的超时。</p><p>考虑对 01 背包的优化，我们也很难想出其他的优化方法。</p><p>注意到每个物体的体积只能为 1 或 2，于是考虑贪心，把体积为 1 和体积为 2 的物品分别存到两个数组中，并且从大到小排序，枚举取 $x$ 个体积为 1 的物品，则可以取 $\frac{v-x}{2}$ 个体积为 2 的物品，每次更新答案即可。</p><p>在前缀和优化后时间复杂度 $O(n \log n)$ 。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lorry</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; </span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span> (<span class="title">T</span> &amp;<span class="title">x</span>) </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(c); c = getchar())  f ^= c == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = getchar())   x = x * <span class="number">10</span> + (c ^ <span class="number">48</span>);</span><br><span class="line">    x = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; </span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">write</span> (<span class="title">T</span> <span class="title">x</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    T y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; y &lt;= x / <span class="number">10</span>; y *= <span class="number">10</span>)   ++len;</span><br><span class="line">    <span class="keyword">for</span> (; len; --len, x %= y, y /= <span class="number">10</span>) <span class="built_in">putchar</span>(x / y + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a, <span class="keyword">const</span> Node &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.p &gt; b.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t1[maxn], t2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> n, v, cnt1, cnt2, sum, ans, pos1, pos2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    read(v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t, p;</span><br><span class="line">        read(t), read(p);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t1[++cnt1].p = p;</span><br><span class="line">            t1[cnt1].id = i; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            t2[++cnt2].p = p;</span><br><span class="line">            t2[cnt2].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::sort(t1 + <span class="number">1</span>, t1 + cnt1 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::sort(t2 + <span class="number">1</span>, t2 + cnt2 + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; ++i)</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + t2[i].p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">std</span>::min(v, cnt1); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += t1[i].p;</span><br><span class="line">        <span class="keyword">if</span> (sum + pre[<span class="built_in">std</span>::min(cnt2, (v - i) / <span class="number">2</span>)] &gt; ans)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = sum + pre[<span class="built_in">std</span>::min(cnt2, (v - i) / <span class="number">2</span>)];</span><br><span class="line">            pos1 = i;</span><br><span class="line">            pos2 = <span class="built_in">std</span>::min(cnt2, (v - i) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pos1; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        write(t1[i].id);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pos2; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        write(t2[i].id);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> 前缀和 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
